{
  "_args": [
    [
      {
        "raw": "rc-form@^2.4.0",
        "scope": null,
        "escapedName": "rc-form",
        "name": "rc-form",
        "rawSpec": "^2.4.0",
        "spec": ">=2.4.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\antd"
    ]
  ],
  "_from": "rc-form@^2.4.0",
  "_hasShrinkwrap": false,
  "_id": "rc-form@2.4.4",
  "_location": "/rc-form",
  "_nodeVersion": "11.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rc-form_2.4.4_1553926549829_0.9422211843847654"
  },
  "_npmUser": {
    "name": "afc163",
    "email": "afc163@gmail.com"
  },
  "_npmVersion": "6.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rc-form@^2.4.0",
    "scope": null,
    "escapedName": "rc-form",
    "name": "rc-form",
    "rawSpec": "^2.4.0",
    "spec": ">=2.4.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/antd"
  ],
  "_resolved": "https://registry.npmjs.org/rc-form/-/rc-form-2.4.4.tgz",
  "_shasum": "ac0f3cc643724991c742d5ae6742777fbc0bcfbb",
  "_shrinkwrap": null,
  "_spec": "rc-form@^2.4.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\antd",
  "author": {
    "name": "yiminghe@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/react-component/form/issues"
  },
  "config": {
    "port": 8000,
    "entry": {
      "rc-form": [
        "./scripts/index.js"
      ]
    }
  },
  "dependencies": {
    "async-validator": "~1.8.5",
    "babel-runtime": "6.x",
    "create-react-class": "^15.5.3",
    "dom-scroll-into-view": "1.x",
    "hoist-non-react-statics": "^3.3.0",
    "lodash": "^4.17.4",
    "warning": "^4.0.3"
  },
  "description": "React High Order Form Component",
  "devDependencies": {
    "antd": "3.x",
    "async": "^2.6.2",
    "enzyme": "^3.1.0",
    "enzyme-adapter-react-16": "^1.0.2",
    "enzyme-to-json": "^3.1.4",
    "history": "^1.16.0",
    "jest": "^21.2.1",
    "pre-commit": "1.x",
    "prop-types": "^15.5.10",
    "rc-tools": "8.x",
    "react": "^16.1.1",
    "react-dom": "^16.1.1",
    "react-redux": "^4.0.0",
    "react-router": "^3.0.0",
    "react-test-renderer": "^16.1.1",
    "redux": "^3.0.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-AHR2GGYJOlKG5jP6ZjqS+PVBrUUXt+kDJFgJeDw17k6RDVIrG1535MxDPgNmRXp2VM4GQij4sVvjaHvwFsUgCA==",
    "shasum": "ac0f3cc643724991c742d5ae6742777fbc0bcfbb",
    "tarball": "https://registry.npmjs.org/rc-form/-/rc-form-2.4.4.tgz",
    "fileCount": 23,
    "unpackedSize": 848717,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnwmWCRA9TVsSAnZWagAAo4IQAIeSz6XyMk0QXCwsJtx2\nFT7YQV3nUyLZy/ych/xQD8epNYzMAjY2jnVjE5Zmtc+k+5IoW7UQQ/xpZmA+\nGPVrdeQvpcqpc5fCwpmL2pCAhzko6+BPTLSc1dW80gl4dNiCPxWqVx/lOdBx\nQGXZzYSHOt7BdGUibcuGUoKZo48zBGPwAvVeo+iYgwL8JvO4EJbY998gFy3L\nbgAitk6znbO1voDsBfA/ql7y2J4WClxx2LRxDyZOLPpbszwJA6EX3b0vo9k4\nWdYaMLWzc+4v3Qfqq5UfaDAP0Oq+v7GI/O3ce5DP2Au6yZnyk76x03EuPyNw\nuNtGzBQE5XqlAa9xIlh1tcauUEcPnrbnC8J/o3UVhyhnGHk8xbZss1MtqY9P\nt68w14KUOKUXD875tHxfHcRAkKcq5Ir5oslqfTgLbmGxGdh4dOsZpk8yfopT\nS1zS/+KwKNbCZ/EMCR7kHxttma/nJrFcmbs/BILm1NBqrGZB0A2eB7ZZp2WM\n+69BzTceSDCrmDI/PO5px2Bo6EzlG8cZVkbU0iaBWUZi/BZF1yBxJLmeUDUN\nnfRr9vt3YleWa00Yj8Mv/9L+mEifftXo6zjuXQIOjRYfW1rnzp7HpH5Zf6f3\nG4sIVLBSSSzOrF2jOuSAQZntAf84/uuQ5nbiWjvvM6OW9V8MDbeHRFt+HTbj\nue2q\r\n=0pJa\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib",
    "es",
    "dist",
    "assets/*.css"
  ],
  "gitHead": "15ccb2712e986f6271067d751a0133fedecf6443",
  "homepage": "https://github.com/react-component/form",
  "jest": {
    "setupFiles": [
      "./tests/setup.js"
    ],
    "collectCoverageFrom": [
      "src/**/*"
    ],
    "snapshotSerializers": [
      "enzyme-to-json/serializer"
    ],
    "transform": {
      "\\.jsx?$": "./node_modules/rc-tools/scripts/jestPreprocessor.js"
    }
  },
  "keywords": [
    "react",
    "react-component",
    "react-form",
    "form"
  ],
  "license": "MIT",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "afc163",
      "email": "afc163@gmail.com"
    },
    {
      "name": "benjycui",
      "email": "benjytrys@gmail.com"
    },
    {
      "name": "ddcat1115",
      "email": "418150596@qq.com"
    },
    {
      "name": "nikogu",
      "email": "644506165@qq.com"
    },
    {
      "name": "yesmeck",
      "email": "yesmeck@gmail.com"
    },
    {
      "name": "yiminghe",
      "email": "yiminghe@gmail.com"
    },
    {
      "name": "zombiej",
      "email": "smith3816@gmail.com"
    }
  ],
  "module": "./es/index",
  "name": "rc-form",
  "optionalDependencies": {},
  "peerDependencies": {
    "prop-types": "^15.0"
  },
  "pre-commit": [
    "lint"
  ],
  "readme": "# rc-form\n\nReact High Order Form Component.\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![gemnasium deps][gemnasium-image]][gemnasium-url]\n[![node version][node-image]][node-url]\n[![npm download][download-image]][download-url]\n[![Code Quality: Javascript][lgtm-badge]][lgtm-badge-url]\n[![Total alerts][lgtm-alerts]][lgtm-alerts-url]\n\n[npm-image]: http://img.shields.io/npm/v/rc-form.svg?style=flat-square\n[npm-url]: http://npmjs.org/package/rc-form\n[travis-image]: https://img.shields.io/travis/react-component/form.svg?style=flat-square\n[travis-url]: https://travis-ci.org/react-component/form\n[coveralls-image]: https://img.shields.io/coveralls/react-component/form.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/react-component/form?branch=master\n[gemnasium-image]: http://img.shields.io/gemnasium/react-component/form.svg?style=flat-square\n[gemnasium-url]: https://gemnasium.com/react-component/form\n[node-image]: https://img.shields.io/badge/node.js-%3E=_0.10-green.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[download-image]: https://img.shields.io/npm/dm/rc-form.svg?style=flat-square\n[download-url]: https://npmjs.org/package/rc-form\n[lgtm-badge]: https://img.shields.io/lgtm/grade/javascript/g/react-component/form.svg?logo=lgtm&logoWidth=18\n[lgtm-badge-url]: https://lgtm.com/projects/g/react-component/form/context:javascript\n[lgtm-alerts]: https://img.shields.io/lgtm/alerts/g/react-component/form.svg?logo=lgtm&logoWidth=18\n[lgtm-alerts-url]: https://lgtm.com/projects/g/react-component/form/alerts\n\n## Development\n\n```\nnpm install\nnpm start\nopen http://localhost:8000/examples/\n```\n\n## Feature\n\n* Support react.js and even react-native\n* Validate fields with [async-validator](https://github.com/yiminghe/async-validator/)\n\n## Install\n\n[![rc-form](https://nodei.co/npm/rc-form.png)](https://npmjs.org/package/rc-form)\n\n## Usage\n\n```js\nimport { createForm, formShape } from 'rc-form';\n\nclass Form extends React.Component {\n  static propTypes = {\n    form: formShape,\n  };\n\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    let errors;\n    const { getFieldProps, getFieldError } = this.props.form;\n    return (\n      <div>\n        <input {...getFieldProps('normal')}/>\n        <input {...getFieldProps('required', {\n          onChange(){}, // have to write original onChange here if you need\n          rules: [{required: true}],\n        })}/>\n        {(errors = getFieldError('required')) ? errors.join(',') : null}\n        <button onClick={this.submit}>submit</button>\n      </div>\n    );\n  }\n}\n\nexport createForm()(Form);\n```\n\n### Use with React Native\n\nExpo preview   \n\n![avatar](./examples/react-native/expo.jpg)\n\n[View the source code](./examples/react-native/App.js)\n\nOr a quicker version:\n\n```js\nimport { createForm } from 'rc-form';\n\nclass Form extends React.Component {\n  componentWillMount() {\n    this.requiredDecorator = this.props.form.getFieldDecorator('required', {\n      rules: [{required: true}],\n    });\n  }\n\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    let errors;\n    const { getFieldError } = this.props.form;\n    return (\n      <div>\n        {this.requiredDecorator(\n          <input\n            onChange={\n              // can still write your own onChange\n            }\n          />\n        )}\n        {(errors = getFieldError('required')) ? errors.join(',') : null}\n        <button onClick={this.submit}>submit</button>\n      </div>\n    );\n  }\n}\n\nexport createForm()(Form);\n```\n\n## createForm(option: Object) => (WrappedComponent: React.Component) => React.Component\n\n| Option    | Description                              | Type       | Default |\n|-----------|------------------------------------------|------------|---------|\n| option.validateMessages | Preseted messages of [async-validator](https://github.com/yiminghe/async-validator) | Object | {} |\n| option.onFieldsChange | Called when field changed, you can dispatch fields to redux store. | (props, changed, all): void | NOOP |\n| option.onValuesChange | Called when value changed. | (props, changed, all): void | NOOP |\n| option.mapProps | Get new props transfered to WrappedComponent. | (props): Object | props => props |\n| option.mapPropsToFields | Convert value from props to fields. Used for read fields from redux store. | (props): Object | NOOP |\n| option.fieldNameProp | Where to store the `name` argument of `getFieldProps`. | String | - |\n| option.fieldMetaProp | Where to store the meta data of `getFieldProps`. | String | - |\n| option.fieldDataProp | Where to store the field data | String | - |\n| option.withRef(deprecated) | Maintain an ref for wrapped component instance, use `refs.wrappedComponent` to access. | boolean | false |\n\n### Note: use wrappedComponentRef instead of withRef after rc-form@1.4.0\n\n```jsx\nclass Form extends React.Component { ... }\n\n// deprecated\nconst EnhancedForm = createForm({ withRef: true })(Form);\n<EnhancedForm ref=\"form\" />\nthis.refs.form.refs.wrappedComponent // => The instance of Form\n\n// Recommended\nconst EnhancedForm = createForm()(Form);\n<EnhancedForm wrappedComponentRef={(inst) => this.formRef = inst} />\nthis.formRef // => The instance of Form\n```\n\n## (WrappedComponent: React.Component) => React.Component\n\nThe returned function of createForm(). It will pass an object as prop `form` with the following members to WrappedComponent:\n\n### getFieldProps(name, option): Object { [valuePropName], [trigger], [validateTrigger] }\n\nWill create props which can be set on a input/InputComponent which support value and onChange interface.\n\nAfter set, this will create a binding with this input.\n\n```jsx\n<form>\n  <input {...getFieldProps('name', { ...options })} />\n</form>\n```\n\n#### name: String\n\nThis input's unique name.\n\n#### option: Object\n\n| Option    | Description                              | Type       | Default |\n|-----------|------------------------------------------|------------|---------|\n| option.valuePropName | Prop name of component's value field, eg: checkbox should be set to `checked` ... | String | 'value' |\n| option.getValueProps | Get the component props according to field value. | (value): Object | (value) => ({ value }) |\n| option.getValueFromEvent | Specify how to get value from event. | (e): any | See below |\n| option.initialValue | Initial value of current component. | any | - |\n| option.normalize | Return normalized value. | (value, prev, all): Object | - |\n| option.trigger | Event which is listened to collect form data. | String | 'onChange' |\n| option.validateTrigger | Event which is listened to validate. Set to falsy to only validate when call props.validateFields. | String|String[] | 'onChange' |\n| option.rules | Validator rules. see: [async-validator](https://github.com/yiminghe/async-validator) | Object[] | - |\n| option.validateFirst | Whether stop validate on first rule of error for this field. | boolean | false |\n| option.validate | | Object[] | - |\n| option.validate[n].trigger | Event which is listened to validate. Set to falsy to only validate when call props.validateFields. | String|String[] | 'onChange' |\n| option.validate[n].rules | Validator rules. see: [async-validator](https://github.com/yiminghe/async-validator) | Object[] | - |\n| option.hidden | Ignore current field while validating or gettting fields | boolean | false |\n| option.preserve | Whether to preserve the value. That will remain the value when the field be unmounted and be mounted again | boolean | false |\n\n##### Default value of `getValueFromEvent`\n\n```js\nfunction defaultGetValueFromEvent(e) {\n  if (!e || !e.target) {\n    return e;\n  }\n  const { target } = e;\n  return target.type === 'checkbox' ? target.checked : target.value;\n}\n```\n\n##### Tips\n\n```js\n{\n  validateTrigger: 'onBlur',\n  rules: [{required: true}],\n}\n// is the shorthand of\n{\n  validate: [{\n    trigger: 'onBlur',\n    rules: [{required: true}],\n  }],\n}\n```\n\n### getFieldDecorator(name:String, option: Object) => (React.Node) => React.Node\n\nSimilar to `getFieldProps`, but add some helper warnings and you can write onXX directly inside React.Node props:\n\n```jsx\n<form>\n  {getFieldDecorator('name', otherOptions)(<input />)}\n</form>\n```\n\n### getFieldsValue([fieldNames: String[]])\n\nGet fields value by fieldNames.\n\n### getFieldValue(fieldName: String)\n\nGet field value by fieldName.\n\n### getFieldInstance(fieldName: String)\n\nGet field react public instance by fieldName.\n\n### setFieldsValue(obj: Object)\n\nSet fields value by kv object.\n\n### setFieldsInitialValue(obj: Object)\n\nSet fields initialValue by kv object. use for reset and initial display/value.\n\n### setFields(obj: Object)\n\nSet fields by kv object. each field can contain errors and value member.\n\n### validateFields([fieldNames: String[]], [options: Object], callback: (errors, values) => void)\n\nValidate and get fields value by fieldNames.\n\noptions is the same as validate method of [async-validator](https://github.com/yiminghe/async-validator).\nAnd add `force` and `scroll`. `scroll` is the same as [dom-scroll-into-view's function parameter `config`](https://github.com/yiminghe/dom-scroll-into-view#function-parameter).\n\n#### options.force: Boolean\n\nDefaults to false. Whether to validate fields which have been validated(caused by validateTrigger).\n\n### getFieldsError(names): Object{ [name]: String[] }\n\nGet inputs' validate errors.\n\n### getFieldError(name): String[]\n\nGet input's validate errors.\n\n### isFieldValidating(name: String): Bool\n\nWhether this input is validating.\n\n### isFieldsValidating(names: String[]): Bool\n\nWhether one of the inputs is validating.\n\n### isFieldTouched(name: String): Bool\n\nWhether this input's value had been changed by user.\n\n### isFieldsTouched(names: String[]): Bool\n\nWhether one of the inputs' values had been changed by user.\n\n### resetFields([names: String[]])\n\nReset specified inputs. Defaults to all.\n\n### isSubmitting(): Bool (Deprecated)\n\nWhether the form is submitting.\n\n### submit(callback: Function) (Deprecated)\n\nCause isSubmitting to return true, after callback called, isSubmitting return false.\n\n\n## rc-form/lib/createDOMForm(option): Function\n\ncreateDOMForm enhancement, support props.form.validateFieldsAndScroll\n\n### validateFieldsAndScroll([fieldNames: String[]], [options: Object], callback: (errors, values) => void)\n\nprops.form.validateFields enhancement, support scroll to the first invalid form field\n\n#### options.container: HTMLElement\n\nDefaults to first scrollable container of form field(until document).\n\n\n## Notes\n\n- Do not use stateless function component inside Form component: https://github.com/facebook/react/pull/6534\n\n- you can not set same prop name as the value of validateTrigger/trigger for getFieldProps\n\n```js\n<input {...getFieldProps('change',{\n  onChange: this.iWantToKnow // you must set onChange here or use getFieldDecorator to write inside <input>\n})}>\n```\n\n- you can not use ref prop for getFieldProps\n\n```js\n<input {...getFieldProps('ref')} />\n\nthis.props.form.getFieldInstance('ref') // use this to get ref\n```\n\nor\n\n```js\n<input {...getFieldProps('ref',{\n  ref: this.saveRef // use function here or use getFieldDecorator to write inside <input> (only allow function)\n})} />\n```\n\n## Test Case\n\n```\nnpm test\nnpm run chrome-test\n```\n\n## Coverage\n\n```\nnpm run coverage\n```\n\nopen coverage/ dir\n\n## License\n\nrc-form is released under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-component/form.git"
  },
  "scripts": {
    "build": "rc-tools run build",
    "compile": "rc-tools run compile --babel-runtime",
    "coverage": "jest --coverage",
    "gh-pages": "rc-tools run gh-pages",
    "lint": "rc-tools run lint",
    "lint:fix": "rc-tools run lint --fix",
    "prepublish": "rc-tools run guard",
    "pub": "rc-tools run pub --babel-runtime",
    "start": "rc-tools run server",
    "test": "jest"
  },
  "version": "2.4.4"
}
