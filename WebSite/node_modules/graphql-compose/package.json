{
  "_args": [
    [
      {
        "raw": "graphql-compose@6.0.3",
        "scope": null,
        "escapedName": "graphql-compose",
        "name": "graphql-compose",
        "rawSpec": "6.0.3",
        "spec": "6.0.3",
        "type": "version"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby"
    ]
  ],
  "_from": "graphql-compose@6.0.3",
  "_hasShrinkwrap": false,
  "_id": "graphql-compose@6.0.3",
  "_location": "/graphql-compose",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-compose_6.0.3_1552855709175_0.7682446746838547"
  },
  "_npmUser": {
    "name": "nodkz",
    "email": "pavel.chertorogov@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-compose@6.0.3",
    "scope": null,
    "escapedName": "graphql-compose",
    "name": "graphql-compose",
    "rawSpec": "6.0.3",
    "spec": "6.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/gatsby"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-compose/-/graphql-compose-6.0.3.tgz",
  "_shasum": "fa5668a30694abef4166703aa03af07a741039a8",
  "_shrinkwrap": null,
  "_spec": "graphql-compose@6.0.3",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby",
  "bugs": {
    "url": "https://github.com/graphql-compose/graphql-compose/issues"
  },
  "collective": {
    "type": "opencollective",
    "url": "https://opencollective.com/graphql-compose",
    "logo": "https://opencollective.com/graphql-compose/logo.txt"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "contributors": [
    {
      "name": "Pavel Chertorogov",
      "email": "pavel.chertorogov@gmail.com"
    }
  ],
  "dependencies": {
    "graphql-type-json": "^0.2.1",
    "object-path": "^0.11.4"
  },
  "description": "GraphQL schema builder from different data sources with middleware extensions.",
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/core": "^7.3.4",
    "@babel/plugin-proposal-class-properties": "^7.3.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.3.4",
    "@babel/plugin-transform-flow-strip-types": "^7.3.4",
    "@babel/plugin-transform-runtime": "^7.3.4",
    "@babel/preset-env": "^7.3.4",
    "@babel/preset-flow": "^7.0.0",
    "@types/graphql": "^14.0.7",
    "babel-core": "^7.0.0-bridge.0",
    "babel-eslint": "^10.0.1",
    "babel-jest": "^24.5.0",
    "cz-conventional-changelog": "^2.1.0",
    "eslint": "^5.15.2",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-flowtype": "^3.4.2",
    "eslint-plugin-import": "^2.16.0",
    "eslint-plugin-prettier": "^3.0.1",
    "flow-bin": "0.95.1",
    "graphql": "14.1.1",
    "jest": "^24.5.0",
    "prettier": "^1.16.4",
    "rimraf": "^2.6.3",
    "semantic-release": "^15.13.3",
    "tslint": "^5.14.0",
    "tslint-config-prettier": "^1.18.0",
    "tslint-plugin-prettier": "^2.0.1",
    "typescript": "^3.3.3333"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-QpywEtNvlEQS0a5VIseMA/tk67QmEN9NNUx1B1tzGR/p7MePyus9wvci2cIP/mwdDrvLRRbwpmidSKQXFD3SEA==",
    "shasum": "fa5668a30694abef4166703aa03af07a741039a8",
    "tarball": "https://registry.npmjs.org/graphql-compose/-/graphql-compose-6.0.3.tgz",
    "fileCount": 363,
    "unpackedSize": 2414670,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcjrKdCRA9TVsSAnZWagAAKx0P/iXo16iNawFu/8mlWoE+\noFuJgWNMsll9xYtQfrPDA8K50BvVGl0J7HJFnIGy4VJuqmeYWgTIaiOnN8bS\n3x7WoIMg5NpKd7MNv3N3rIsM+qSVZiXpWPxYcHW2STiEAbMUuX9+z/31fiLh\n7D6tcr6VeyDhWANAQ8mEDWpvsfeaCgRfQjQDCNWulUJQgYZ4W6mJ0BV6DpFN\n129CCL2+76yc1NGl29B1ZKc1WrUlXuoUF761b13YZZe1fu0Sl8Xrc8oe8s0r\nKAWjWYAXjvs0Kw7Cf/5LaRwQu+zyaANIUMPN+kLzraBSGiB3hqCbcnui3s/S\nZQPEvd34H03YCBNAtQb5x4WP3B2fcJq+QnjrCNPHmoHmnfHXIY44K6rjQX53\nYN7VKeTJboCBgYW59SgbiDOCFAixAaHDUejd8nuHzSIXpDLbewmobFG0Irnz\nGKV1aLf9elDY45kvf0APJFklQ54Lpi76ovDB2nvwjDnYKVeRrIlS//5rM2iy\nSuGae5UanMQ0EQJ1y5k+9JLN/ftBFUEKMIjhjGRafK/RG9CG7AHTN2KiH6zH\nA1ohgPgvgM2YdvnIhb8Ucg5vhSEdPbeYnvcC3w7yh0q8c0677KYxFROPzpn1\nt3al7fRCYv6fkN2TEw/j+RPbguo7atB6MY8RF+z4SVOx1JeemwVq1ZEJW1C9\nGiNN\r\n=u+1L\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "lib",
    "esm",
    "mjs"
  ],
  "gitHead": "c7a04c5d48b2d36742ba1171de0d3b03285be7bb",
  "homepage": "https://github.com/graphql-compose/graphql-compose",
  "keywords": [
    "graphql",
    "compose"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "nodkz",
      "email": "pavel.chertorogov@gmail.com"
    }
  ],
  "module": "mjs/index.mjs",
  "name": "graphql-compose",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": ">=0.13.0 || >=14.0.0 || >=14.1.0"
  },
  "readme": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/graphql-compose/graphql-compose/master/docs/logo.png\" width=\"200\" /></p>\n\n# GraphQL-compose\n\n[![](https://img.shields.io/npm/v/graphql-compose.svg)](https://www.npmjs.com/package/graphql-compose)\n[![codecov coverage](https://img.shields.io/codecov/c/github/graphql-compose/graphql-compose.svg)](https://codecov.io/github/graphql-compose/graphql-compose)\n[![Travis](https://img.shields.io/travis/graphql-compose/graphql-compose.svg?maxAge=2592000)](https://travis-ci.org/graphql-compose/graphql-compose)\n[![npm](https://img.shields.io/npm/dt/graphql-compose.svg)](http://www.npmtrends.com/graphql-compose)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n![TypeScript compatible](https://img.shields.io/badge/typescript-compatible-brightgreen.svg)\n![FlowType compatible](https://img.shields.io/badge/flowtype-compatible-brightgreen.svg)\n[![Backers on Open Collective](https://opencollective.com/graphql-compose/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/graphql-compose/sponsors/badge.svg)](#sponsors)\n\n[GraphQL](http://graphql.org/) – is a query language for APIs. [graphql-js](https://github.com/graphql/graphql-js) is the reference implementation of GraphQL for nodejs which introduce GraphQL type system for describing schema _(definition over configuration)_ and executes queries on the server side. [express-graphql](https://github.com/graphql/express-graphql) is a HTTP server which gets request data, passes it to `graphql-js` and returned result passes to response.\n\n**`graphql-compose`** – the _imperative tool_ which worked on top of `graphql-js`. It provides some methods for creating types and GraphQL Models (so I call types with a list of common resolvers) for further building of complex relations in your schema.\n\n* provides methods for editing GraphQL output/input types (add/remove fields/args/interfaces)\n* introduces `Resolver`s – the named graphql fieldConfigs, which can be used for finding, updating, removing records\n* provides an easy way for creating relations between types via `Resolver`s\n* provides converter from `OutputType` to `InputType`\n* provides `projection` parser from AST\n* provides `GraphQL schema language` for defining simple types\n* adds additional types `Date`, `Json`\n\n**`graphql-compose-[plugin]`** – is a _declarative generators/plugins_ that build on top of `graphql-compose`, which take some ORMs, schema definitions and creates GraphQL Models from them or modify existed GraphQL Types.\n\nType generator plugins:\n\n* [graphql-compose-json](https://github.com/graphql-compose/graphql-compose-json) - generates GraphQL type from JSON (a good helper for wrapping REST APIs)\n* [graphql-compose-mongoose](https://github.com/graphql-compose/graphql-compose-mongoose) - generates GraphQL types from mongoose (MongoDB models) with Resolvers.\n* [graphql-compose-elasticsearch](https://github.com/graphql-compose/graphql-compose-elasticsearch) - generates GraphQL types from elastic mappings; ElasticSearch REST API proxy via GraphQL.\n* [graphql-compose-aws](https://github.com/graphql-compose/graphql-compose-aws) - expose AWS Cloud API via GraphQL\n\nUtility plugins:\n\n* [graphql-compose-relay](https://github.com/graphql-compose/graphql-compose-relay) - reassemble GraphQL types with `Relay` specific things, like `Node` type and interface, `globalId`, `clientMutationId`.\n* [graphql-compose-connection](https://github.com/graphql-compose/graphql-compose-connection) - generates `connection` Resolver from `findMany` and `count` Resolvers.\n* [graphql-compose-dataloader](https://github.com/stoffern/graphql-compose-dataloader) - add DataLoader to graphql-composer resolvers.\n\n## Documentation\n\n[graphql-compose.github.io](https://graphql-compose.github.io/)\n\n## Live Demos\n\n* [graphql-compose.herokuapp.com](https://graphql-compose.herokuapp.com/) - Live demo of GraphQL Server (9 models, 14 files, ~750 LOC)\n* [nodkz.github.io/relay-northwind](https://nodkz.github.io/relay-northwind) - Live demo of Relay client working with the server above (8 crazy pages, 47 files, ~3000 LOC)\n\n## Example\n\ncity.js\n\n```js\nimport { TypeComposer} from 'graphql-compose';\nimport { CountryTC } from './country';\n\nexport const CityTC = TypeComposer.create(`\n  type City {\n    code: String!\n    name: String!\n    population: Number\n    countryCode: String\n    tz: String\n  }\n`);\n\n// Define some additional fields\nCityTC.addFields({\n  ucName: { // standard GraphQL like field definition\n    type: GraphQLString,\n    resolve: (source) => source.name.toUpperCase(),\n  },\n  currentLocalTime: { // extended GraphQL Compose field definition\n    type: 'Date',\n    resolve: (source) => moment().tz(source.tz).format(),\n    projection: { tz: true }, // load `tz` from database, when requested only `localTime` field\n  },\n  counter: 'Int', // shortening for only type definition for field\n  complex: `type ComplexType {\n    subField1: String\n    subField2: Float\n    subField3: Boolean\n    subField4: ID\n    subField5: JSON\n    subField6: Date\n  }`,\n  list0: {\n    type: '[String]',\n    description: 'Array of strings',\n  },\n  list1: '[String]',\n  list2: ['String'],\n  list3: [new GraphQLOutputType(...)],\n  list4: [`type Complex2Type { f1: Float, f2: Int }`],\n});\n\n// Add resolver method\nCityTC.addResolver({\n  kind: 'query',\n  name: 'findMany',\n  args: {\n    filter: `input CityFilterInput {\n      code: String!\n    }`,\n    limit: {\n      type: 'Int',\n      defaultValue: 20,\n    },\n    skip: 'Int',\n    // ... other args if needed\n  },\n  type: [CityTC], // array of cities\n  resolve: async ({ args, context }) => {\n    return context.someCityDB\n      .findMany(args.filter)\n      .limit(args.limit)\n      .skip(args.skip);\n  },\n});\n\n// Add relation between City and Country by `countryCode` field.\nCityTC.addRelation( // GraphQL relation definition\n  'country',\n  {\n    resolver: () => CountryTC.getResolver('findOne'),\n    prepareArgs: {\n      filter: source => ({ code: `${source.countryCode}` }),\n    },\n    projection: { countryCode: true },\n  }\n);\n\n// Remove `tz` field from schema\nCityTC.removeField('tz');\n\n// Add description to field\nCityTC.extendField('name', {\n  description: 'City name',\n});\n```\n\nschema.js\n\n```js\nimport { schemaComposer } from 'graphql-compose';\nimport { CityTC } from './city';\nimport { CountryTC } from './country';\n\nschemaComposer.Query.addFields({\n  cities: CityTC.getResolver('findMany'),\n  country: CountryTC.getResolver('findOne'),\n  currentTime: {\n    type: 'Date',\n    resolve: () => Date.now(),\n  },\n});\n\nschemaComposer.Mutation.addFields({\n  createCity: CityTC.getResolver('createOne'),\n  updateCity: CityTC.getResolver('updateById'),\n  ...adminAccess({\n    removeCity: CityTC.getResolver('removeById'),\n  }),\n});\n\nfunction adminAccess(resolvers) {\n  Object.keys(resolvers).forEach(k => {\n    resolvers[k] = resolvers[k].wrapResolve(next => rp => {\n      // rp = resolveParams = { source, args, context, info }\n      if (!rp.context.isAdmin) {\n        throw new Error('You should be admin, to have access to this action.');\n      }\n      return next(rp);\n    });\n  });\n  return resolvers;\n}\n\nexport default schemaComposer.buildSchema();\n```\n\n## Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/graphql-compose/contributors.svg?width=890&button=false\" /></a>\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/graphql-compose#backer)]\n\n<a href=\"https://opencollective.com/graphql-compose#backers\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/graphql-compose#sponsor)]\n\n<a href=\"https://opencollective.com/graphql-compose/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/graphql-compose/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/graphql-compose/sponsor/9/avatar.svg\"></a>\n\n## License\n\n[MIT](https://github.com/graphql-compose/graphql-compose/blob/master/LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphql-compose/graphql-compose.git"
  },
  "scripts": {
    "build": "npm run build-cjs && npm run build-mjs && npm run build-esm",
    "build-cjs": "rimraf lib && BABEL_ENV=cjs babel src --ignore __tests__,__mocks__ -d lib && COPY_TO_FOLDER=lib npm run build-flow && COPY_TO_FOLDER=lib npm run build-ts",
    "build-esm": "rimraf esm && BABEL_ENV=esm babel src --ignore __tests__,__mocks__ -d esm && COPY_TO_FOLDER=esm npm run build-flow && COPY_TO_FOLDER=esm npm run build-ts",
    "build-flow": "find ./src -name '*.js' -not -path '*/__*' | while read filepath; do cp $filepath `echo ./${COPY_TO_FOLDER:-lib}$filepath | sed 's/.\\/src\\//\\//g'`.flow; done",
    "build-mjs": "rimraf mjs && BABEL_ENV=mjs babel src --ignore __tests__,__mocks__ -d mjs && yarn build-mjs-rename && COPY_TO_FOLDER=mjs npm run build-flow",
    "build-mjs-rename": "find ./mjs -name \"*.js\" -exec bash -c 'mv \"$1\" \"${1%.js}\".mjs' - '{}' \\;",
    "build-ts": "find ./src -name '*.d.ts' -not -path '*/__*' | while read filepath; do cp $filepath `echo ./${COPY_TO_FOLDER:-lib}$filepath | sed 's/.\\/src\\//\\//g'`; done",
    "coverage": "jest --coverage --maxWorkers 4",
    "eslint": "eslint --ext .js ./src",
    "flow": "flow",
    "lint": "npm run eslint && npm run tslint",
    "semantic-release": "semantic-release",
    "test": "npm run coverage && npm run lint && npm run flow && npm run tscheck",
    "test-vers": "yarn add graphql@0.13.0 --dev && jest && yarn add graphql@14.0.0 --dev && jest",
    "tscheck": "tsc --noEmit",
    "tslint": "tslint -p . \"src/**/*.d.ts\"",
    "watch": "jest --watch"
  },
  "types": "lib/index.d.ts",
  "version": "6.0.3"
}
