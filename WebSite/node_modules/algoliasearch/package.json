{
  "_args": [
    [
      {
        "raw": "algoliasearch@^3.24.5",
        "scope": null,
        "escapedName": "algoliasearch",
        "name": "algoliasearch",
        "rawSpec": "^3.24.5",
        "spec": ">=3.24.5 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-plugin-algolia"
    ]
  ],
  "_from": "algoliasearch@^3.24.5",
  "_hasShrinkwrap": false,
  "_id": "algoliasearch@3.32.1",
  "_location": "/algoliasearch",
  "_nodeVersion": "9.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/algoliasearch_3.32.1_1552574046215_0.03373150075721787"
  },
  "_npmUser": {
    "name": "haroenv",
    "email": "hello@haroen.me"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "algoliasearch@^3.24.5",
    "scope": null,
    "escapedName": "algoliasearch",
    "name": "algoliasearch",
    "rawSpec": "^3.24.5",
    "spec": ">=3.24.5 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gatsby-plugin-algolia",
    "/react-instantsearch-dom",
    "/react-instantsearch-native"
  ],
  "_resolved": "https://registry.npmjs.org/algoliasearch/-/algoliasearch-3.32.1.tgz",
  "_shasum": "605f8a2c17ab8da2af4456110f4d0a02b384e3d0",
  "_shrinkwrap": null,
  "_spec": "algoliasearch@^3.24.5",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-plugin-algolia",
  "author": {
    "name": "Algolia SAS",
    "url": "https://www.algolia.com"
  },
  "browser": {
    "./index.js": "./src/browser/builds/algoliasearch.js",
    "./lite.js": "./src/browser/builds/algoliasearchLite.js"
  },
  "browserify": {
    "transform": [
      "envify"
    ]
  },
  "bugs": {
    "url": "https://github.com/algolia/algoliasearch-client-js/issues"
  },
  "bundlesize": [
    {
      "path": "./dist/algoliasearch.?(jquery|angular).min.js",
      "maxSize": "19 kB"
    },
    {
      "path": "./dist/algoliasearchLite.min.js",
      "maxSize": "13 kB"
    }
  ],
  "contributors": [
    {
      "name": "Algolia Team",
      "email": "support@algolia.com",
      "url": "http://www.algolia.com"
    }
  ],
  "dependencies": {
    "agentkeepalive": "^2.2.0",
    "debug": "^2.6.9",
    "envify": "^4.0.0",
    "es6-promise": "^4.1.0",
    "events": "^1.1.0",
    "foreach": "^2.0.5",
    "global": "^4.3.2",
    "inherits": "^2.0.1",
    "isarray": "^2.0.1",
    "load-script": "^1.0.0",
    "object-keys": "^1.0.11",
    "querystring-es3": "^0.2.1",
    "reduce": "^1.0.1",
    "semver": "^5.1.0",
    "tunnel-agent": "^0.6.0"
  },
  "description": "AlgoliaSearch API JavaScript client",
  "devDependencies": {
    "angular": "^1.6.4",
    "array.from": "^1.0.3",
    "async": "^1.5.2",
    "babel-eslint": "^4.1.6",
    "bowser": "1.9.3",
    "browserify": "^14.5.0",
    "bulk-require": "^1.0.0",
    "bulkify": "^1.2.0",
    "bundle-collapser": "^1.2.1",
    "bundlesize": "^0.15.3",
    "chance": "^1.0.9",
    "compression": "^1.6.2",
    "deumdify": "^1.2.4",
    "domready": "0.3.0",
    "eslint": "^1.7.3",
    "eslint-config-airbnb": "^0.1.0",
    "eslint-config-algolia": "4.2.0",
    "eslint-plugin-react": "^3.6.3",
    "express": "^4.15.3",
    "faux-jax": "^5.0.6",
    "http-proxy": "^1.13.3",
    "http-server": "^0.10.0",
    "jquery": "^3.2.1",
    "jquery-ajax-transport-xdomainrequest": "^1.0.4",
    "lodash-compat": "^3.10.2",
    "morgan": "^1.8.2",
    "mversion": "^1.10.1",
    "pretty-bytes": "^2.0.1",
    "proxy": "^0.2.4",
    "proxy-agent": "^2.0.0",
    "self-signed": "^1.3.1",
    "server-destroy-vvo": "^1.0.1",
    "sinon": "^1.17.7",
    "tap-bail": "^1.0.0",
    "tap-dot": "^1.0.5",
    "tape": "^4.5.1",
    "uglify-js": "2.6.4",
    "url-parse": "^1.1.9",
    "watchify": "^3.9.0",
    "webpack": "^1.13.1",
    "xhr": "^2.4.0",
    "zuul": "^3.12.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-NaaHMboU9tKwrU3aim7LlzSDqKb+1TGaC+Lx3NOttSnuMHbPpaf+7LtJL4KlosbRWEwqb9t5wSYMVDrPTH2dNA==",
    "shasum": "605f8a2c17ab8da2af4456110f4d0a02b384e3d0",
    "tarball": "https://registry.npmjs.org/algoliasearch/-/algoliasearch-3.32.1.tgz",
    "fileCount": 51,
    "unpackedSize": 1225768,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcimZeCRA9TVsSAnZWagAAaKMQAIal4yqkq1lSv7/eZ5pt\nf92kSMryV4FkZVGiO1AfzfAaIHZz5/EPi+cgXbgAX9AXP3CwWnrJxnYmjluN\n60NdDxPRgYluCLulkp/sQhFG6clCXTf+TNMjbPJXoHTS5W+PJ4dT3ezfZ725\n5rxB7Lb79ET7lLQxnJ6ts8eGFFcnh0QMYqPESgmDdfMcT4GMldNdevzACezg\n1jIgu0fYQBo/R0Jf+paL7ZRgBlcA+roOzga2kJV9iPMlNQpXxB3W3nKpq05c\nV7HX6c9J5lfi0/DMmyCip/zj4Rvon7Df6EEWDI7iYmYSYu1ciWF1njTioQZh\ngWSKaMwCs9brfqhZZyr4yd7771yNOmiXUdq1gk60Ljr1E81aSNJ0GOc40hRO\n+XpbcIDaG1fFW/uffdOjFwwui0dHnO5NUKEuNElMoQGWfuODE4KRpH0iG4H9\n2qfl914kA1+g+cYKq8O4vAimku3uHbP+wOVCMi2u8xUpiTFgxcyJz2/00Com\nPFYnxI20ZFYpFWqzl2v9+/ttmCVKzNGo1wOrpTaiOW3gAyGEH2VIikCSzWru\nILlux3tsJUKWNTvoCfm2ckhdh+zQNEzZJEqX+kX4fetNDTlASA8QTu9u0Flu\nPv3yW3uTYflXJfEFjAMnxapWGHYgDyb1qrI/xo7ULP2tL6I713HLP7MCcXVL\nBtVu\r\n=QZih\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "src",
    "dist",
    "plugins",
    "index.js",
    "lite.js",
    "reactnative.js",
    "bower.json"
  ],
  "gitHead": "1ebba1d2f8af6b28cfa45db147f77b67b4194b9e",
  "homepage": "https://www.algolia.com/doc/api-client/javascript/",
  "jsdelivr": "./dist/algoliasearch.min.js",
  "keywords": [
    "algolia",
    "search",
    "search api",
    "instant search",
    "realtime",
    "autocomplete"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adrienjoly",
      "email": "adrien.joly@gmail.com"
    },
    {
      "name": "agdavid",
      "email": "antonio.g.david@gmail.com"
    },
    {
      "name": "bobylito",
      "email": "bobylito@gmail.com"
    },
    {
      "name": "bramses",
      "email": "bram.adams@algolia.com"
    },
    {
      "name": "broujo",
      "email": "johann.broudin@gmail.com"
    },
    {
      "name": "cbaptiste",
      "email": "coquellebaptiste@gmail.com"
    },
    {
      "name": "clemfromspace",
      "email": "clement.denoix@algolia.com"
    },
    {
      "name": "e-krebs",
      "email": "emmanuel.krebs@algolia.com"
    },
    {
      "name": "francoischalifour",
      "email": "francois.chalifour@gmail.com"
    },
    {
      "name": "haroenv",
      "email": "hello@haroen.me"
    },
    {
      "name": "iam4x",
      "email": "iam4x@me.com"
    },
    {
      "name": "jaimemendozadev",
      "email": "jaimemendozadev@gmail.com"
    },
    {
      "name": "jasonsooter",
      "email": "jason.sooter@gmail.com"
    },
    {
      "name": "jerska",
      "email": "matthieu.dumont@algolia.com"
    },
    {
      "name": "jonasbadalic",
      "email": "jonas.badalic@algolia.com"
    },
    {
      "name": "jonmontane",
      "email": "jon@stratus.one"
    },
    {
      "name": "kosai106",
      "email": "kevin@oesterkilde.dk"
    },
    {
      "name": "l0aded",
      "email": "oliver.han@algolia.com"
    },
    {
      "name": "lorrissaintgenez",
      "email": "lorris.saint-genez@algolia.com"
    },
    {
      "name": "lukyvj",
      "email": "lucas.bonomi@gmail.com"
    },
    {
      "name": "marieglr",
      "email": "magillier@hotmail.fr"
    },
    {
      "name": "marielaure",
      "email": "marie-laure.sin@algolia.com"
    },
    {
      "name": "mikaa123",
      "email": "misokol123@gmail.com"
    },
    {
      "name": "mikhael.jabroux",
      "email": "mikhael.jabroux@algolia.com"
    },
    {
      "name": "mthuret",
      "email": "mlthutrix@gmail.com"
    },
    {
      "name": "noclat",
      "email": "nicolas.torres@algolia.com"
    },
    {
      "name": "pixelastic",
      "email": "tim@pixelastic.com"
    },
    {
      "name": "proudlygeek",
      "email": "g.bargelli@gmail.com"
    },
    {
      "name": "raphi",
      "email": "raphael.daguenet@algolia.com"
    },
    {
      "name": "rayrutjes",
      "email": "raymond.rutjes@gmail.com"
    },
    {
      "name": "redox",
      "email": "sylvain.utard@gmail.com"
    },
    {
      "name": "ronanlevesque",
      "email": "ronan.levesque@gmail.com"
    },
    {
      "name": "s-pace",
      "email": "sylvain.pace@algolia.com"
    },
    {
      "name": "samouss",
      "email": "samuel.vllnt@gmail.com"
    },
    {
      "name": "seafoox",
      "email": "seafoox@gmail.com"
    },
    {
      "name": "sepehrf",
      "email": "sepehr9f@gmail.com"
    },
    {
      "name": "shipow",
      "email": "shipowlata@gmail.com"
    },
    {
      "name": "speedblue",
      "email": "support@algolia.com"
    },
    {
      "name": "sylvainh",
      "email": "sylvain.huprelle@algolia.com"
    },
    {
      "name": "therealwebby",
      "email": "alex@alexjwebb.com"
    },
    {
      "name": "thomaslef",
      "email": "thomas.lefevre@algolia.com"
    },
    {
      "name": "tkrugg",
      "email": "contact@ymammar.com"
    },
    {
      "name": "valentindotxyz",
      "email": "me@valentinpolo.fr"
    },
    {
      "name": "vvo",
      "email": "vincent.voyer@gmail.com"
    }
  ],
  "name": "algoliasearch",
  "optionalDependencies": {},
  "readme": "# Algolia Search API Client for JavaScript\n\n[Algolia Search](https://www.algolia.com) is a hosted full-text, numerical, and faceted search engine capable of delivering realtime results from the first keystroke.\nThe **Algolia Search API Client for JavaScript** lets you easily use the [Algolia Search REST API](https://www.algolia.com/doc/rest-api/search) from your JavaScript code.\n\n[![Version][version-svg]][package-url] [![Build Status][travis-svg]][travis-url] [![License][license-image]][license-url] [![Downloads][downloads-image]][downloads-url] [![jsDelivr Hits][jsdelivr-badge]][jsdelivr-hits]\n\n[![Browser tests][browser-test-matrix]][browser-test-url]\n\n[travis-svg]: https://img.shields.io/travis/algolia/algoliasearch-client-javascript/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/algolia/algoliasearch-client-javascript\n[jsdelivr-badge]: https://data.jsdelivr.com/v1/package/npm/algoliasearch/badge\n[jsdelivr-hits]: https://www.jsdelivr.com/package/npm/algoliasearch\n[license-image]: https://img.shields.io/badge/license-MIT-green.svg?style=flat-square\n[license-url]: LICENSE.txt\n[downloads-image]: https://img.shields.io/npm/dm/algoliasearch.svg?style=flat-square\n[downloads-url]: http://npm-stat.com/charts.html?package=algoliasearch\n[browser-test-matrix]: https://saucelabs.com/browser-matrix/algoliasearch-js.svg\n[browser-test-url]: https://saucelabs.com/u/algoliasearch-js\n[version-svg]: https://img.shields.io/npm/v/algoliasearch.svg?style=flat-square\n[package-url]: https://npmjs.org/package/algoliasearch\n\n\nThe JavaScript client works both on the frontend (browsers) or on the backend (Node.js) with the same API.\n\nThe backend (Node.js) API can be used to index your data using your Algolia admin API keys.\n\nOur JavaScript library is [UMD](https://github.com/umdjs/umd) compatible, you can\nuse it with any module loader.\n\nWhen not using any module loader, it will export an `algoliasearch` function in the `window` object.\n\n\n\n\n## API Documentation\n\nYou can find the full reference on [Algolia's website](https://www.algolia.com/doc/api-client/javascript/).\n\n\n## Table of Contents\n\n\n1. **[Install](#install)**\n\n    * [Frontend](#frontend)\n    * [Node.js / React Native / Browserify / webpack](#nodejs--react-native--browserify--webpack)\n    * [TypeScript typings](#typescript-typings)\n    * [NativeScript](#nativescript)\n    * [Bower](#bower)\n    * [&lt;script&gt; tag using CDNs](#script-tag-using-cdns)\n    * [Search only/lite client](#search-onlylite-client)\n\n1. **[Quick Start](#quick-start)**\n\n    * [Initialize the client](#initialize-the-client)\n    * [Push data](#push-data)\n    * [Search](#search)\n    * [Configure](#configure)\n    * [Client options](#client-options)\n    * [Callback convention](#callback-convention)\n    * [Promises](#promises)\n    * [Request strategy](#request-strategy)\n    * [Cache](#cache)\n    * [Proxy support](#proxy-support)\n    * [Keep-alive](#keep-alive)\n    * [Debugging](#debugging)\n\n1. **[Getting Help](#getting-help)**\n\n\n\n\n\n# Getting Started\n\n\n\n## Install\n\n#### Frontend\n\nYou can either use a package manager like npm or include a `<script>` tag.\n\n#### Node.js / React Native / Browserify / webpack\n\nWe are [browserify](http://browserify.org/)able and [webpack](http://webpack.github.io/) friendly.\n\n```sh\nnpm install algoliasearch --save\n```\n\n#### TypeScript typings\n\nFor Typescript typings, we provide the definition file via [typings](https://github.com/typings/typings)\n\n```sh\nnpm install --save @types/algoliasearch\n```\n\n#### NativeScript\n\n```sh\ntns plugin add nativescript-algolia\n```\n#### Bower\n\n```sh\nbower install algoliasearch -S\n```\n\n#### &lt;script&gt; tag using CDNs\n\n##### Recommended: jsDelivr.com\n\n[jsDelivr](http://www.jsdelivr.com/about.php) is a global CDN delivery for JavaScript libraries.\n\nTo include the latest releases and all upcoming features and patches, use this:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js\"></script>\n```\n\n##### Other CDNS\n\nWe recommend using jsDelivr, but `algoliasearch` is also available at:\n- [CDNJS](https://cdnjs.com/libraries/algoliasearch)\n- [unpkg](https://unpkg.com): https://unpkg.com/algoliasearch@3/dist/algoliasearch.min.js\n\n#### Search only/lite client\n\nWe have a lightweight build available that can only do searches. Use it when filesize\nis important to you or if you like to include only what you need.\n\nFind it on jsDelivr:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/algoliasearch/3/algoliasearchLite.min.js\"></script>\n```\n\n## Quick Start\n\nIn 30 seconds, this quick start tutorial will show you how to index and search objects.\n\n### Initialize the client\n\nYou first need to initialize the client. For that you need your **Application ID** and **API Key**.\nYou can find both of them on [your Algolia account](https://www.algolia.com/api-keys).\n\n```js\n// var algoliasearch = require('algoliasearch');\n// var algoliasearch = require('algoliasearch/reactnative');\n// var algoliasearch = require('algoliasearch/lite');\n// or just use algoliasearch if you are using a <script> tag\n// if you are using AMD module loader, algoliasearch will not be defined in window,\n// but in the AMD modules of the page\n\nvar client = algoliasearch('applicationID', 'apiKey');\n```\n\n### Push data\n\nWithout any prior configuration, you can start indexing [500 contacts](https://github.com/algolia/datasets-public/blob/master/contacts/contacts.json) in the `contacts` index using the following code:\n\n> for this use: [**admin** API key](https://www.algolia.com/doc/guides/security/api-keys/#admin-api-key) in client instantiation\n\n```js\nvar index = client.initIndex('contacts');\nvar contactsJSON = require('./contacts.json');\n\nindex.addObjects(contactsJSON, function(err, content) {\n  if (err) {\n    console.error(err);\n  }\n});\n```\n\n### Search\n\nYou can now search for contacts using firstname, lastname, company, etc. (even with typos):\n\n> for this use: [**search only** API key](https://www.algolia.com/doc/guides/security/api-keys/#search-only-api-key) in client instantiation\n\n```js\n// firstname\nindex.search('jimmie', function(err, content) {\n  console.log(content.hits);\n});\n\n// firstname with typo\nindex.search('jimie', function(err, content) {\n  console.log(content.hits);\n});\n\n// a company\nindex.search('california paint', function(err, content) {\n  console.log(content.hits);\n});\n\n// a firstname & company\nindex.search('jimmie paint', function(err, content) {\n  console.log(content.hits);\n});\n```\n\n### Configure\n\nSettings can be customized to tune the search behavior. For example, you can add a custom sort by number of followers to the already great built-in relevance:\n\n> for this use: [**admin** API key](https://www.algolia.com/doc/guides/security/api-keys/#admin-api-key) in client instantiation\n\n```js\nindex.setSettings({\n  'customRanking': ['desc(followers)']\n}, function(err, content) {\n  console.log(content);\n});\n```\n\nYou can also configure the list of attributes you want to index by order of importance (first = most important):\n\n**Note:** Since the engine is designed to suggest results as you type, you'll generally search by prefix.\nIn this case the order of attributes is very important to decide which hit is the best:\n\n```js\nindex.setSettings({\n  'searchableAttributes': [\n    'lastname',\n    'firstname',\n    'company',\n    'email',\n    'city',\n    'address'\n  ]\n}, function(err, content) {\n  console.log(content);\n});\n```\n\n### Client options\n\nIn most situations, there is no need to tune the options. We provide this list to be\ntransparent with our users.\n\n- `timeout` (Number) timeout for requests to our servers, in milliseconds\n  + in Node.js this is an inactivity timeout. Defaults to 15s\n  + in the browser, this is a global timeout. Defaults to 2s (incremental)\n- `protocol` (String) protocol to use when communicating with algolia\n  + in the browser, we use the page protocol by default\n  + in Node.js it's https by default\n  + possible values: 'http:', 'https:'\n- `hosts.read` ([String]) array of read hosts to use to call Algolia servers, computed automatically\n- `hosts.write` ([String]) array of write hosts to use to call Algolia servers, computed automatically\n- `httpAgent` ([HttpAgent](https://nodejs.org/api/http.html#http_class_http_agent)) <sup>node-only</sup> Node.js httpAgent instance to use when communicating with Algolia servers.\n- `dsn` ([Boolean=true]) enable or disable DSN (defaults to true). Disable this when you're in a backend situation, but still have worldwide DSN for another (frontend) search.\n\nTo pass an option, use:\n\n```js\nvar client = algoliasearch(applicationId, apiKey, {\n  timeout: 4000\n})\n```\n\n### Callback convention\n\nEvery API call takes a callback as last parameter. This callback will then be called with two arguments:\n\n 1. **error**: null or an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object. More info on the error can be find in `error.message`.\n 2. **content**: the object containing the answer from the server, it's a JavaScript object\n\n### Promises\n\n**If you do not provide a callback**, you will get a promise (but never both).\n\nPromises are the [native Promise implementation](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nWe use [jakearchibald/es6-promise](https://github.com/stefanpenner/es6-promise) as a polyfill when needed.\n\n### Request strategy\n\nThe request strategy used by the JavaScript client includes:\n\n- On the browser:\n  + [CORS](https://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing#Browser_support) for modern browsers\n  + [XDomainRequest](https://msdn.microsoft.com/en-us/library/ie/cc288060%28v=vs.85%29.aspx) for IE <= 10\n  + [JSONP](https://en.wikipedia.org/wiki/JSONP) in any situation where Ajax requests are unavailable or blocked.\n- Node.js:\n  + native [`http` module](https://nodejs.org/api/)\n\nConnections are always `keep-alive`.\n\n### Cache\n\n**Browser only**\n\nTo avoid performing the same API calls twice **search** results will be stored\nin a `cache` that will be tied to your JavaScript `client` and `index` objects.\nWhenever a call for a specific query (and filters) is made, we store the results\nin a local cache. If you ever call the exact same query again, we read the\nresults from the cache instead of doing an API call.\n\nThis is particularly useful when your users are deleting characters from their\ncurrent query, to avoid useless API calls. Because it is stored as a simple\nJavaScript object in memory, the cache is automatically reset whenever you\nreload the page.\n\nIt is never automatically purged, nor can it be completely disabled. Instead, we\nprovide the `index.clearCache()` (or `client.clearCache()` if you're using the\n[Search multiple indices](#search-multiple-indices) method that you can call to reset it.\n\n### Proxy support\n\n**Node.js only**\n\nIf you are behind a proxy, just set `HTTP_PROXY` or `HTTPS_PROXY` environment variables before starting your Node.js program.\n\n```sh\nHTTP_PROXY=http://someproxy.com:9320 node main.js\n```\n\n### Keep-alive\n\n**Node.js only**\n\nKeep-alive is activated by default.\n\nBecause of the nature of keepalive connections, your process will hang even if you do not do any more command using the `client`.\n\nTo fix this, we expose a `client.destroy()` method that will terminate all remaining alive connections.\n\nYou should call this method when you are finished working with the AlgoliaSearch API. So that your process will exit gently.\n\n**Note: keep-alive is still always activated in browsers, this is a native behavior of browsers.**\n\n### Debugging\n\nThe client will send you errors when a method call fails for some reasons.\n\nYou can get detailed debugging information:\n\n```js\nindex.search('something', function searchDone(err) {\n  if (err) {\n    console.log(err.message);\n    console.log(err.debugData);\n    return;\n  }\n});\n```\n\n`err.debugData` contains the array of requests parameters that were used to issue requests.\n\n## Getting Help\n\n- **Need help**? Ask a question to the [Algolia Community](https://discourse.algolia.com/) or on [Stack Overflow](http://stackoverflow.com/questions/tagged/algolia).\n- **Found a bug?** You can open a [GitHub issue](https://github.com/algolia/algoliasearch-client-javascript/issues).\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/algolia/algoliasearch-client-js.git"
  },
  "scripts": {
    "build": "./scripts/build",
    "dev": "APP_ENV=development DEBUG=zuul* zuul --no-coverage --local 8080 -- test/run-browser.js",
    "dev-integration": "APP_ENV=development DEBUG=zuul* zuul --no-coverage --local 8080 -- test/run-integration.js",
    "examples": "http-server . -a 0.0.0.0",
    "lint": "./scripts/lint",
    "release": "git clean dist/ -f && git checkout dist/ && yarn && ./scripts/release && APP_ENV=production npm run build",
    "test": "./scripts/test",
    "test-ci:bundlesize": "./scripts/bundlesize",
    "test-ci:integration-browsers": "./scripts/test-browser integration",
    "test-ci:integration-node": "./scripts/test-node-integration",
    "test-ci:lint": "./scripts/lint",
    "test-ci:unit-browsers": "./scripts/test-browser unit",
    "test-ci:unit-node": "./scripts/test-node-unit",
    "watch": "watchify index.js -d -v -s algoliasearch -o dist/algoliasearch.js"
  },
  "version": "3.32.1"
}
