{
  "_args": [
    [
      {
        "raw": "remark-stringify@^1.1.0",
        "scope": null,
        "escapedName": "remark-stringify",
        "name": "remark-stringify",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\remark"
    ]
  ],
  "_from": "remark-stringify@>=1.1.0 <2.0.0",
  "_id": "remark-stringify@1.1.0",
  "_inCache": true,
  "_location": "/remark-stringify",
  "_nodeVersion": "5.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/remark-stringify-1.1.0.tgz_1470758341818_0.04028692073188722"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "3.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "remark-stringify@^1.1.0",
    "scope": null,
    "escapedName": "remark-stringify",
    "name": "remark-stringify",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/remark"
  ],
  "_resolved": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-1.1.0.tgz",
  "_shasum": "a7105e25b9ee2bf9a49b75d2c423f11b06ae2092",
  "_shrinkwrap": null,
  "_spec": "remark-stringify@^1.1.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\remark",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "bugs": {
    "url": "https://github.com/wooorm/remark/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    {
      "name": "Eugene Sharygin",
      "email": "eush77@gmail.com"
    }
  ],
  "dependencies": {
    "ccount": "^1.0.0",
    "extend": "^3.0.0",
    "longest-streak": "^1.0.0",
    "markdown-table": "^0.4.0",
    "parse-entities": "^1.0.2",
    "repeat-string": "^1.5.4",
    "stringify-entities": "^1.0.1",
    "unherit": "^1.0.4"
  },
  "description": "Markdown compiler for remark",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "a7105e25b9ee2bf9a49b75d2c423f11b06ae2092",
    "tarball": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-1.1.0.tgz"
  },
  "engines": {
    "node": ">=0.11.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "http://remark.js.org",
  "keywords": [
    "markdown",
    "abstract",
    "syntax",
    "tree",
    "ast",
    "stringify"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "remark-stringify",
  "optionalDependencies": {},
  "readme": "# remark-stringify [![Build Status][build-badge]][build-status] [![Coverage Status][coverage-badge]][coverage-status] [![Chat][chat-badge]][chat]\n\n[Compiler][] for [**unified**][unified].  Stringifies an\n[**mdast**][mdast] syntax tree to markdown.  Used in the [**remark**\nprocessor][processor].  Can be [extended][extend] to change how\nmarkdown is compiled.\n\n## Installation\n\n[npm][]:\n\n```bash\nnpm install remark-stringify\n```\n\n## Usage\n\n```js\nvar unified = require('unified');\nvar parse = require('remark-parse');\nvar toc = require('remark-toc');\nvar stringify = require('remark-stringify');\n\nprocess.stdin\n    .pipe(unified())\n    .use(markdown)\n    .use(toc)\n    .use(html)\n    .pipe(process.stdout, {\n        'bullet': '*',\n        'fence': '~',\n        'fences': true,\n        'incrementListMarker': false\n    });\n```\n\n## Table of Contents\n\n*   [API](#api)\n    *   [processor.use(stringify)](#processorusestringify)\n    *   [stringify.Compiler](#stringifycompiler)\n*   [Extending the Compiler](#extending-the-compiler)\n    *   [Compiler#visitors](#compilervisitors)\n    *   [function visitor(node\\[, parent\\])](#function-visitornode-parent)\n*   [License](#license)\n\n## API\n\n### `processor.use(stringify)`\n\nConfigure the `processor` to stringify [**mdast**][mdast] syntax trees\nto markdown.\n\n###### `options`\n\nOptions are passed later through [`processor.stringify()`][stringify],\n[`processor.process()`][process], or [`processor.pipe()`][pipe].\nThe following settings are supported:\n\n*   `gfm` (`boolean`, default: `true`):\n    *   Escape pipes (`|`, for tables);\n    *   Escape colons (`:`, for literal URLs)\n    *   Escape tildes (`~`, for strike-through).\n*   `commonmark` (`boolean`, default: `false`):\n    *   Compile adjacent blockquotes separately;\n    *   Escape more characters using slashes, instead of as entities.\n*   `pedantic` (`boolean`, default: `false`):\n    *   Escape underscores in words.\n*   `entities` (`string` or `boolean`, default: `false`):\n\n    *   `true` — Entities are generated for special HTML characters\n        (`&` > `&amp;`) and non-ASCII characters (`©` > `&copy;`).\n        If named entities are not (widely) supported, numbered character\n        references are used (`’` > `&#x2019;`);\n\n    *   `'numbers'` — Numbered entities are generated (`&` > `&#x26;`)\n        for special HTML characters and non-ASCII characters.\n\n    *   `'escape'` — Special HTML characters are encoded (`&` >\n        `&amp;`, `’` > `&#x2019;`), non-ASCII characters not (ö persists).\n\n*   `setext` (`boolean`, default: `false`)\n    — Compile headings, when possible, in Setext-style: using `=` for\n    level one headings and `-` for level two headings.  Other heading\n    levels are compiled as ATX (respecting `closeAtx`).\n*   `closeAtx` (`boolean`, default: `false`)\n    — Compile ATX headings with the same amount of closing hashes as\n    opening hashes.\n*   `looseTable` (`boolean`, default: `false`)\n    — Create tables without fences (initial and final pipes).\n*   `spacedTable` (`boolean`, default: `true`)\n    — Create tables without spacing between pipes and content.\n*   `fence` (`'~'` or ``'`'``, default: ``'`'``)\n    — Fence marker to use for code blocks.\n*   `fences` (`boolean`, default: `false`)\n    — Stringify code blocks without language with fences.\n*   `bullet` (`'-'`, `'*'`, or `'+'`, default: `'-'`)\n    — Bullet marker to use for unordered list items.\n*   `listItemIndent` (`'tab'`, `'mixed'` or `'1'`, default: `'tab'`)\n\n    How to indent the content from list items:\n\n    *   `'tab'`: use tab stops (4 spaces);\n    *   `'1'`: use one space;\n    *   `'mixed'`: use `1` for tight and `tab` for loose list items.\n\n*   `incrementListMarker` (`boolean`, default: `true`)\n    — Whether to increment ordered list item bullets.\n*   `rule` (`'-'`, `'*'`, or `'_'`, default: `'*'`)\n    — Marker to use for thematic breaks (horizontal rules).\n*   `ruleRepetition` (`number`, default: `3`)\n    — Number of markers to use for thematic breaks (horizontal rules).\n    Should be `3` or more.\n*   `ruleSpaces` (`boolean`, default `true`)\n    — Whether to pad thematic break (horizontal rule) markers with\n    spaces.\n*   `strong` (`'_'` or `'*'`, default `'*'`)\n    — Marker to use for importance.\n*   `emphasis` (`'_'` or `'*'`, default `'_'`)\n    — Marker to use for emphasis.\n\n### `stringify.Compiler`\n\nAccess to the raw [compiler][], if you need it.\n\n## Extending the Compiler\n\nIf this plug-in is used, it adds a [`Compiler`][compiler] constructor\nto the `processor`.  Other plug-ins can change and add visitors on\nthe compiler’s prototype to change how markdown is stringified.\n\nThe below plug-in modifies a [visitor][] to add an extra blank line\nbefore level two headings.\n\n```js\nfunction gap(processor) {\n    var Compiler = processor.Compiler;\n    var visitors = Compiler.prototype.visitors;\n    var heading = visitors.heading;\n\n    /* Add a visitor for `heading`s. */\n    visitors.heading = function (node) {\n        return (node.depth === 2 ? '\\n' : '') + heading.apply(this, arguments);\n    };\n}\n\nmodule.exports = gap;\n```\n\n### `Compiler#visitors`\n\nAn object mapping [node][] types to [`visitor`][visitor]s.\n\n### `function visitor(node[, parent])`\n\nStringify `node`.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Node to compile;\n*   `parent` ([`Node`][node], optional) — Parent of `node`.\n\n###### Returns\n\n`string`, the compiled given `node`.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/wooorm/remark.svg\n\n[build-status]: https://travis-ci.org/wooorm/remark\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/wooorm/remark.svg\n\n[coverage-status]: https://codecov.io/github/wooorm/remark\n\n[chat-badge]: https://img.shields.io/gitter/room/wooorm/remark.svg\n\n[chat]: https://gitter.im/wooorm/remark\n\n[license]: https://github.com/wooorm/remark/blob/master/LICENSE\n\n[author]: http://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[unified]: https://github.com/wooorm/unified\n\n[processor]: https://github.com/wooorm/remark\n\n[stringify]: https://github.com/wooorm/unified#processorstringifynode-filevalue-options\n\n[process]: https://github.com/wooorm/unified#processorprocessfilevalue-options-done\n\n[pipe]: https://github.com/wooorm/unified#processorpipestream-options\n\n[compiler]: https://github.com/wooorm/unified#processorcompiler\n\n[mdast]: https://github.com/wooorm/mdast\n\n[node]: https://github.com/wooorm/unist#node\n\n[extend]: #extending-the-compiler\n\n[visitor]: #function-visitornode-parent\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/wooorm/remark/tree/master/packages/remark-stringify"
  },
  "scripts": {},
  "version": "1.1.0"
}
