{
  "_args": [
    [
      {
        "raw": "postcss-logical@^1.1.1",
        "scope": null,
        "escapedName": "postcss-logical",
        "name": "postcss-logical",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\postcss-preset-env"
    ]
  ],
  "_from": "postcss-logical@^1.1.1",
  "_hasShrinkwrap": false,
  "_id": "postcss-logical@1.1.1",
  "_location": "/postcss-logical",
  "_nodeVersion": "9.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-logical_1.1.1_1521611432076_0.013265724308496152"
  },
  "_npmUser": {
    "name": "jonathantneal",
    "email": "jonathantneal@hotmail.com"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {
    "chalk": "2.4.2",
    "supports-color": "5.5.0"
  },
  "_requested": {
    "raw": "postcss-logical@^1.1.1",
    "scope": null,
    "escapedName": "postcss-logical",
    "name": "postcss-logical",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-preset-env"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-logical/-/postcss-logical-1.1.1.tgz",
  "_shasum": "bcabf0638d8aa747743b32bc52f9d90d4a3313d2",
  "_shrinkwrap": null,
  "_spec": "postcss-logical@^1.1.1",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\postcss-preset-env",
  "author": {
    "name": "Jonathan Neal",
    "email": "jonathantneal@hotmail.com"
  },
  "bugs": {
    "url": "https://github.com/jonathantneal/postcss-logical/issues"
  },
  "dependencies": {
    "postcss": "^6.0.20"
  },
  "description": "Use logical properties and values in CSS",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.2.2",
    "babel-preset-env": "^1.6.1",
    "echint": "^4.0.1",
    "eslint": "^4.19.0",
    "eslint-config-dev": "^2.0.0",
    "postcss-tape": "^2.2.0",
    "pre-commit": "^1.2.2",
    "rollup": "^0.57.1",
    "rollup-plugin-babel": "^3.0.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZJgyLJlp3uPKae9+6sJKFjD06UZzb/m3M1LPeHsaBMvvyatcNWwCfOZVIq00fJdxUqa9QeuQO6RZElKmRdWMEg==",
    "shasum": "bcabf0638d8aa747743b32bc52f9d90d4a3313d2",
    "tarball": "https://registry.npmjs.org/postcss-logical/-/postcss-logical-1.1.1.tgz",
    "fileCount": 6,
    "unpackedSize": 49477
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "eslintConfig": {
    "extends": "dev",
    "parser": "babel-eslint"
  },
  "files": [
    "index.cjs.js",
    "index.es.js"
  ],
  "gitHead": "ba0dd1ca31d4066265770d0fd279f5e55ec37744",
  "homepage": "https://github.com/jonathantneal/postcss-logical#readme",
  "keywords": [
    "postcss",
    "css",
    "postcss-plugin",
    "logical",
    "flow",
    "relative",
    "property",
    "properties",
    "values",
    "ltr",
    "rtl",
    "dir",
    "directions",
    "directional",
    "inline",
    "block",
    "start",
    "end",
    "align",
    "border",
    "clear",
    "float",
    "margin",
    "padding",
    "size",
    "text"
  ],
  "license": "CC0-1.0",
  "main": "index.cjs.js",
  "maintainers": [
    {
      "name": "jonathantneal",
      "email": "jonathantneal@hotmail.com"
    }
  ],
  "module": "index.es.js",
  "name": "postcss-logical",
  "optionalDependencies": {},
  "readme": "# PostCSS Logical Properties and Values [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS Logo\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![CSS Standard Status][css-img]][css-url]\n[![NPM Version][npm-img]][npm-url]\n[![Build Status][cli-img]][cli-url]\n[![Windows Build Status][win-img]][win-url]\n[![Gitter Chat][git-img]][git-url]\n\n[PostCSS Logical Properties and Values] lets you use logical, rather than\nphysical, direction and dimension mappings in CSS, following the\n[CSS Logical Properties and Values] specification.\n\n```pcss\n.banner {\n  color: #222222;\n  inset: logical 0 5px 10px;\n  padding-inline: 20px 40px;\n  resize: block;\n  transition: color 200ms;\n}\n\n/* becomes */\n\n.banner {\n  color: #222222;\n  top: 0; left: 5px; bottom: 10px; right: 5px;\n\n  &:dir(ltr) {\n    padding-left: 20px; padding-right: 40px;\n  }\n  \n  &:dir(rtl) {\n    padding-right: 20px; padding-left: 40px;\n  }\n\n  resize: vertical;\n  transition: color 200ms;\n}\n\n/* or, when used with { dir: 'ltr' } */\n\n.banner {\n  color: #222222;\n  top: 0; left: 5px; bottom: 10px; right: 5px;\n  padding-left: 20px; padding-right: 40px;\n  resize: vertical;\n  transition: color 200ms;\n}\n\n/* or, when used with { preserve: true } */\n\n.banner {\n  color: #222222;\n  top: 0; left: 5px; bottom: 10px; right: 5px;\n\n  &:dir(ltr) {\n    padding-left: 20px; padding-right: 40px;\n  }\n\n  &:dir(rtl) {\n    padding-right: 20px; padding-left: 40px;\n  }\n\n  inset: logical 0 5px 10px;\n  padding-inline: 20px 40px;\n  resize: block;\n  resize: vertical;\n  transition: color 200ms;\n}\n```\n\nThese shorthand properties set values for physical properties by default.\nSpecifying the `logical` keyboard at the beginning of the property value will\ntransform the flow-relative values afterward into both physical LTR and RTL\nproperties:\n\n#### Logical Borders\n\n- `border`, `border-block`, `border-block-start`, `border-block-end`,\n  `border-inline`, `border-inline-start`, `border-inline-end`, `border-start`,\n  `border-end`, `border-color`, `border-block-color`,\n  `border-block-start-color`, `border-block-end-color`, `border-inline-color`,\n  `border-inline-start-color`, `border-inline-end-color`, `border-start-color`,\n  `border-end-color`, `border-style`, `border-block-style`,\n  `border-block-start-style`, `border-block-end-style`, `border-inline-style`,\n  `border-inline-start-style`, `border-inline-end-style`, `border-start-style`,\n  `border-end-style`, `border-width`, `border-block-width`,\n  `border-block-start-width`, `border-block-end-width`, `border-inline-width`,\n  `border-inline-start-width`, `border-inline-end-width`, `border-start-width`,\n  `border-end-width`\n\n#### Logical Offsets\n\n- `inset`, `inset-block`, `inset-block-start`, `inset-block-end`,\n  `inset-inline`, `inset-inline-start`, `inset-inline-end`, `inset-start`,\n  `inset-end`\n\n#### Logical Margins\n\n- `margin`, `margin-block`, `margin-block-start`, `margin-block-end`,\n  `margin-inline`, `margin-inline-start`, `margin-inline-end`, `margin-start`,\n  `margin-end`\n\n#### Logical Paddings\n\n- `padding`, `padding-block`, `padding-block-start`, `padding-block-end`,\n  `padding-inline`, `padding-inline-start`, `padding-inline-end`,\n  `padding-start`, `padding-end`\n\n#### Logical Sizes\n\n- `block-size`, `inline-size`\n\n#### Flow-Relative Values\n\n- `clear: inline-start`, `clear: inline-end`, `float: inline-start`,\n  `float: inline-end`, `text-align: start`, `text-align: end`\n\n---\n\nBy default, [PostCSS Logical Properties and Values] creates fallback selectors\nwhich require at least one `[dir]` attribute in your HTML. If you donâ€™t have\nany `[dir]` attributes, consider using the following JavaScript:\n\n```js\n// force at least one dir attribute (this can run at any time)\ndocument.documentElement.dir=document.documentElement.dir||'ltr';\n```\n\nOtherwise, consider using the `dir` option to transform all logical properties\nand values to a specific direction.\n\n```js\nrequire('postcss-logical')({\n  dir: 'ltr'\n});\n```\n\n## Usage\n\nAdd [PostCSS Logical Properties and Values] to your build tool:\n\n```bash\nnpm install postcss-logical --save-dev\n```\n\n#### Node\n\nUse [PostCSS Logical Properties and Values] to process your CSS:\n\n```js\nimport postcssLogical from 'postcss-logical';\n\npostcssLogical.process(YOUR_CSS);\n```\n\n#### PostCSS\n\nAdd [PostCSS] to your build tool:\n\n```bash\nnpm install postcss --save-dev\n```\n\nUse [PostCSS Logical Properties and Values] as a plugin:\n\n```js\nimport postcss from 'gulp-postcss';\nimport postcssLogical from 'postcss-logical';\n\npostcss([\n  postcssLogical(/* options */)\n]).process(YOUR_CSS);\n```\n\n#### Webpack\n\nAdd [PostCSS Loader] to your build tool:\n\n```bash\nnpm install postcss-loader --save-dev\n```\n\nUse [PostCSS Logical Properties and Values] in your Webpack configuration:\n\n```js\nimport postcssLogical from 'postcss-logical';\n\nexport default {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          { loader: 'postcss-loader', options: {\n            ident: 'postcss',\n            plugins: () => [\n              postcssLogical(/* options */)\n            ]\n          } }\n        ]\n      }\n    ]\n  }\n}\n```\n\n#### Gulp\n\nAdd [Gulp PostCSS] to your build tool:\n\n```bash\nnpm install gulp-postcss --save-dev\n```\n\nUse [PostCSS Logical Properties and Values] in your Gulpfile:\n\n```js\nimport postcss from 'gulp-postcss';\nimport postcssLogical from 'postcss-logical';\n\ngulp.task('css', () => gulp.src('./src/*.css').pipe(\n  postcss([\n    postcssLogical(/* options */)\n  ])\n).pipe(\n  gulp.dest('.')\n));\n```\n\n#### Grunt\n\nAdd [Grunt PostCSS] to your build tool:\n\n```bash\nnpm install grunt-postcss --save-dev\n```\n\nUse [PostCSS Logical Properties and Values] in your Gruntfile:\n\n```js\nimport postcssLogical from 'postcss-logical';\n\ngrunt.loadNpmTasks('grunt-postcss');\n\ngrunt.initConfig({\n  postcss: {\n    options: {\n      use: [\n       postcssLogical(/* options */)\n      ]\n    },\n    dist: {\n      src: '*.css'\n    }\n  }\n});\n```\n\n## Options\n\n### dir\n\nThe `dir` option determines how directional fallbacks should be added to CSS.\nBy default, fallbacks replace the logical declaration with nested `:dir`\npseudo-classes. If `dir` is defined as `ltr` or `rtl` then only the left or\nright directional fallbacks will replace the logical declarations. If\n`preserve` is defined as `true`, then the `dir` option will be ignored.\n\n### preserve\n\nThe `preserve` option determines whether directional fallbacks should be added\nbefore logical declarations without replacing them. By default, directional\nfallbacks replace logical declaration. If `preserve` is defined as `true`, then\nthe `dir` option will be ignored.\n\n[cli-url]: https://travis-ci.org/jonathantneal/postcss-logical\n[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-logical.svg\n[css-img]: https://jonathantneal.github.io/css-db/badge/css-logical.svg\n[css-url]: https://jonathantneal.github.io/css-db/#css-logical\n[git-url]: https://gitter.im/postcss/postcss\n[git-img]: https://img.shields.io/badge/chat-gitter-blue.svg\n[npm-url]: https://www.npmjs.com/package/postcss-logical\n[npm-img]: https://img.shields.io/npm/v/postcss-logical.svg\n[win-url]: https://ci.appveyor.com/project/jonathantneal/postcss-logical\n[win-img]: https://img.shields.io/appveyor/ci/jonathantneal/postcss-logical.svg\n\n[CSS Logical Properties and Values]: https://drafts.csswg.org/css-logical/\n[Gulp PostCSS]: https://github.com/postcss/gulp-postcss\n[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS Loader]: https://github.com/postcss/postcss-loader\n[PostCSS Logical Properties and Values]: https://github.com/jonathantneal/postcss-logical\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonathantneal/postcss-logical.git"
  },
  "scripts": {
    "prepublishOnly": "npm test",
    "pretest": "rollup -c .rollup.js --silent",
    "test": "echo 'Running tests...'; npm run test:ec && npm run test:js && npm run test:tape",
    "test:ec": "echint --ignore index.*.js test",
    "test:js": "eslint *.js --cache --ignore-path .gitignore --quiet",
    "test:tape": "postcss-tape"
  },
  "version": "1.1.1"
}
