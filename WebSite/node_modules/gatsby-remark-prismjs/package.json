{
  "_args": [
    [
      {
        "raw": "gatsby-remark-prismjs@^3.0.0",
        "scope": null,
        "escapedName": "gatsby-remark-prismjs",
        "name": "gatsby-remark-prismjs",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher"
    ]
  ],
  "_from": "gatsby-remark-prismjs@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "gatsby-remark-prismjs@3.2.9",
  "_location": "/gatsby-remark-prismjs",
  "_nodeVersion": "10.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gatsby-remark-prismjs_3.2.9_1556804259086_0.6884526676997726"
  },
  "_npmUser": {
    "name": "pieh",
    "email": "misiek.piechowiak@gmail.com"
  },
  "_npmVersion": "lerna/3.10.7/node@v10.9.0+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gatsby-remark-prismjs@^3.0.0",
    "scope": null,
    "escapedName": "gatsby-remark-prismjs",
    "name": "gatsby-remark-prismjs",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gatsby-remark-prismjs/-/gatsby-remark-prismjs-3.2.9.tgz",
  "_shasum": "d8f30fe35f9db0db91d28e9109111a4c1499e227",
  "_shrinkwrap": null,
  "_spec": "gatsby-remark-prismjs@^3.0.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher",
  "author": {
    "name": "Kyle Mathews",
    "email": "mathews.kyle@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gatsbyjs/gatsby/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.0.0",
    "parse-numeric-range": "^0.0.2",
    "unist-util-visit": "^1.3.0"
  },
  "description": "Adds syntax highlighting to code blocks at build time using PrismJS",
  "devDependencies": {
    "@babel/cli": "^7.0.0",
    "@babel/core": "^7.0.0",
    "babel-preset-gatsby-package": "^0.1.4",
    "cross-env": "^5.1.4",
    "prismjs": "^1.15.0",
    "remark": "^9.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6SqFpzp46zjnOzoBss2Ghao1YMbFpwPzxpGuD36goFdyNyRtA/m+MBvR+BHFsjVa2bgpm6eYRo6APNjYPyzZcg==",
    "shasum": "d8f30fe35f9db0db91d28e9109111a4c1499e227",
    "tarball": "https://registry.npmjs.org/gatsby-remark-prismjs/-/gatsby-remark-prismjs-3.2.9.tgz",
    "fileCount": 11,
    "unpackedSize": 39475,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcyvKkCRA9TVsSAnZWagAAp5kP/0geWFsysEbHtquykhEz\nadUW08sU0zFeDvBgsay1PpZ/SEaYLBBI8ct+oSdHsewcBTYxlHJ9dYPWYD8K\nPZu64nvziEr9xjsOiVYITNTgYcmLeSrivQv2qIdCgrUeoK352GJZfRcc//pM\nzhZ7beyshxPYisTGIaX/eGMieTpaPVAkjmxwWadFmg33bgQFkPdSHUIBy+MO\nuyED1STBgD/iQtHjXub/5r8AvlCyzFo3rTxfPJZJiPPzU1D/SFa06o6xCsU1\ncxb1zo3yvhjgJvGVZPeOpATJuJ/TOgWdyJv/lW/xoaAqQsAJtao7EaT+3+3I\nqx5ttFuag7rk00HpG7sYJwIGuzeWyAMM2GhjOz0mpdaurWr0oQ6/oM4isu8q\nYJkthCDY57ELSE6IBwNAXCydcEkCUz5PnjkcR8D715iylAV/CDB8R7pvUeEW\nQ8IMkSKJx/AuUn62xJCzflTPvdHa8sUiZdS3squ58DbgcLIouyLnozl87a/t\nkoSdv1dz4+s7RV+9pchodQIzP1FCeBjK2WhXA8nwZ13BaJsUHQa/VaUmdAvx\nnqWo1qQA7RmXrvqckIirnOLPhQLfXFhshS7T5PkE2i42nU0bLCtzNbTJ+DpQ\ncveu88gixb5KzrQxHa6lPVnZdR5ZAvpXYNfMIH8pf0Aai/PUzNL8SzXo5/fT\nSKYn\r\n=53C3\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "182d8e4bfdefb4cc8db8c1dd279b311bf71755dd",
  "homepage": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-prismjs#readme",
  "keywords": [
    "gatsby",
    "gatsby-plugin",
    "prismjs",
    "remark"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dschau",
      "email": "dustinschau@gmail.com"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    },
    {
      "name": "jamo",
      "email": "jamo@isotalo.fi"
    },
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    },
    {
      "name": "m-allanson",
      "email": "michael.allanson@gmail.com"
    },
    {
      "name": "monastic.panic",
      "email": "monastic.panic@gmail.com"
    },
    {
      "name": "moocar",
      "email": "anthony@moocar.me"
    },
    {
      "name": "pieh",
      "email": "misiek.piechowiak@gmail.com"
    },
    {
      "name": "sidharthachatterjee",
      "email": "me@sidharthachatterjee.com"
    },
    {
      "name": "wardpeet",
      "email": "ward@coding-tech.com"
    }
  ],
  "name": "gatsby-remark-prismjs",
  "optionalDependencies": {},
  "peerDependencies": {
    "gatsby": "^2.0.0",
    "prismjs": "^1.15.0"
  },
  "readme": "# gatsby-remark-prismjs\n\nAdds syntax highlighting to code blocks in markdown files using\n[PrismJS](http://prismjs.com/).\n\n## Install\n\n`npm install --save gatsby-transformer-remark gatsby-remark-prismjs prismjs`\n\n## How to use\n\n```javascript\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-prismjs`,\n          options: {\n            // Class prefix for <pre> tags containing syntax highlighting;\n            // defaults to 'language-' (eg <pre class=\"language-js\">).\n            // If your site loads Prism into the browser at runtime,\n            // (eg for use with libraries like react-live),\n            // you may use this to prevent Prism from re-processing syntax.\n            // This is an uncommon use-case though;\n            // If you're unsure, it's best to use the default value.\n            classPrefix: \"language-\",\n            // This is used to allow setting a language for inline code\n            // (i.e. single backticks) by creating a separator.\n            // This separator is a string and will do no white-space\n            // stripping.\n            // A suggested value for English speakers is the non-ascii\n            // character '›'.\n            inlineCodeMarker: null,\n            // This lets you set up language aliases.  For example,\n            // setting this to '{ sh: \"bash\" }' will let you use\n            // the language \"sh\" which will highlight using the\n            // bash highlighter.\n            aliases: {},\n            // This toggles the display of line numbers globally alongside the code.\n            // To use it, add the following line in src/layouts/index.js\n            // right after importing the prism color scheme:\n            //  `require(\"prismjs/plugins/line-numbers/prism-line-numbers.css\");`\n            // Defaults to false.\n            // If you wish to only show line numbers on certain code blocks,\n            // leave false and use the {numberLines: true} syntax below\n            showLineNumbers: false,\n            // If setting this to true, the parser won't handle and highlight inline\n            // code used in markdown i.e. single backtick code like `this`.\n            noInlineHighlight: false,\n          },\n        },\n      ],\n    },\n  },\n]\n```\n\n### Include CSS\n\n#### Required: Pick a PrismJS theme or create your own\n\nPrismJS ships with a number of [themes][5] (previewable on the [PrismJS\nwebsite][6]) that you can easily include in your Gatsby site, or you can build\nyour own by copying and modifying an example (which is what we've done for\n[gatsbyjs.org](https://gatsbyjs.org)).\n\nTo load a theme, just require its CSS file in your `gatsby-browser.js` file, e.g.\n\n```javascript\n// gatsby-browser.js\nrequire(\"prismjs/themes/prism-solarizedlight.css\")\n```\n\n#### Optional: Add line highlighting styles\n\nIf you want to highlight lines of code, you also need to add some additional CSS\nthat targets our _custom line highlighting implementation_ (which slightly\ndiffers from PrismJS's own plugin for that – more on that later).\n\nFor line highlights similar to PrismJS's, try:\n\n```css\n.gatsby-highlight-code-line {\n  background-color: #feb;\n  display: block;\n  margin-right: -1em;\n  margin-left: -1em;\n  padding-right: 1em;\n  padding-left: 0.75em;\n  border-left: 0.25em solid #f99;\n}\n```\n\nThis should work out quite nicely for the \"Solarized Light\" PrismJS theme we\njust added in the previous part. However, you will notice that when a\nhighlighted line runs wider than the surrounding code block container (causing a\nhorizontal scrollbar), its background won't be drawn for the initially hidden,\noverflowing part. :(\n\nWe saw others fix that problem and decided to do so, too. Just add the following\nCSS along your PrismJS theme and the styles for `.gatsby-highlight-code-line`:\n\n```css\n/**\n * Add back the container background-color, border-radius, padding, margin\n * and overflow that we removed from <pre>.\n */\n.gatsby-highlight {\n  background-color: #fdf6e3;\n  border-radius: 0.3em;\n  margin: 0.5em 0;\n  padding: 1em;\n  overflow: auto;\n}\n\n/**\n * Remove the default PrismJS theme background-color, border-radius, margin,\n * padding and overflow.\n * 1. Make the element just wide enough to fit its content.\n * 2. Always fill the visible space in .gatsby-highlight.\n * 3. Adjust the position of the line numbers\n */\n.gatsby-highlight pre[class*=\"language-\"] {\n  background-color: transparent;\n  margin: 0;\n  padding: 0;\n  overflow: initial;\n  float: left; /* 1 */\n  min-width: 100%; /* 2 */\n}\n```\n\n#### Optional: Add line numbering\n\nIf you want to add line numbering alongside your code, you need to\nimport the corresponding CSS file from PrismJS, right after importing your\ncolorscheme in `gatsby-browser.js`:\n\n```javascript\n// gatsby-browser.js\nrequire(\"prismjs/plugins/line-numbers/prism-line-numbers.css\")\n```\n\nThen add in the corresponding CSS:\n\n```css\n/**\n * If you already use line highlighting\n */\n\n/* Adjust the position of the line numbers */\n.gatsby-highlight pre[class*=\"language-\"].line-numbers {\n  padding-left: 2.8em;\n}\n\n/**\n * If you only want to use line numbering\n */\n\n.gatsby-highlight {\n  background-color: #fdf6e3;\n  border-radius: 0.3em;\n  margin: 0.5em 0;\n  padding: 1em;\n  overflow: auto;\n}\n\n.gatsby-highlight pre[class*=\"language-\"].line-numbers {\n  padding: 0;\n  padding-left: 2.8em;\n  overflow: initial;\n}\n```\n\n### Usage in Markdown\n\nThis is some beautiful code:\n\n    ```javascript\n    // In your gatsby-config.js\n    plugins: [\n      {\n        resolve: `gatsby-transformer-remark`,\n        options: {\n          plugins: [\n            `gatsby-remark-prismjs`,\n          ]\n        }\n      }\n    ]\n    ```\n\n### Line numbering\n\nTo see the line numbers alongside your code, you can use the `numberLines` option:\n\n    ```javascript{numberLines: true}\n    // In your gatsby-config.js\n    plugins: [\n      {\n        resolve: `gatsby-transformer-remark`,\n        options: {\n          plugins: [\n            `gatsby-remark-prismjs`,\n          ]\n        }\n      }\n    ]\n    ```\n\nYou can also start numbering at any index you wish (here, numbering\nwill start at index 5):\n\n    ```javascript{numberLines: 5}\n    // In your gatsby-config.js\n    plugins: [\n      {\n        resolve: `gatsby-transformer-remark`,\n        options: {\n          plugins: [\n            `gatsby-remark-prismjs`,\n          ]\n        }\n      }\n    ]\n    ```\n\n### Line highlighting\n\nYou can also add line highlighting. It adds a span around lines of code with a\nspecial class `.gatsby-highlight-code-line` that you can target with styles. See\nthis README for more info.\n\nTo highlight lines, you can use one of the following directives as comments in your\ncode:\n\n- `highlight-line` highlights the current line;\n- `highlight-next-line` highlights the next line;\n- `highlight-start` highlights the lines until the matching `hightlight-end`;\n- `highlight-range{1, 4-6}` will highlight the next line, and the fourth, fifth and sixth lines.\n\n````\n```jsx\nclass FlavorForm extends React.Component { // highlight-line\n  constructor(props) {\n    super(props);\n    this.state = {value: 'coconut'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    // highlight-next-line\n    this.setState({value: event.target.value});\n  }\n\n  // highlight-start\n  handleSubmit(event) {\n    alert('Your favorite flavor is: ' + this.state.value);\n    event.preventDefault();\n  }\n  // highlight-end\n\n  render() {\n    return (\n      { /* highlight-range{1,4-9,12} */ }\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick your favorite flavor:\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value=\"grapefruit\">Grapefruit</option>\n            <option value=\"lime\">Lime</option>\n            <option value=\"coconut\">Coconut</option>\n            <option value=\"mango\">Mango</option>\n          </select>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n````\n\nYou can also specify the highlighted lines outside of the code block.\nIn the following code snippet, lines 1 and 4 through 6 will get the line\nhighlighting. The line range parsing is done with\n<https://www.npmjs.com/package/parse-numeric-range>.\n\n````\n```javascript{1,4-6}\n// In your gatsby-config.js\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n````\n\n### Line hiding\n\nAs well as highlighting lines, it's possible to _hide_ lines from the rendered output. Often this is handy when using `gatsby-remark-prismjs` along with [`gatsby-remark-embed-snippet`](https://www.gatsbyjs.org/packages/gatsby-remark-embed-snippet/).\n\nAs with highlighting lines, you can control which lines to hide by adding directives as comments in your source code.\n\nThe available directives are:\n\n- `hide-line` hides the current line;\n- `hide-next-line` hides the next line;\n- `hide-start` hides the lines until the matching `hide-end`;\n- `hide-range{1, 4-6}` will hide the next line, and the fourth, fifth and sixth lines.\n\nThe hide-line directives will always be hidden too. Check out [the using-remark example site](https://using-remark.gatsbyjs.org/embed-snippets/) to see how this looks on a live site.\n\n### Inline code blocks\n\nIn addition to fenced code blocks, inline code blocks will be passed through\nPrismJS as well.\n\nIf you set the `inlineCodeMarker`, then you can also specify a format style.\n\nHere's an example of how to use this if the `inlineCodeMarker` was set to `±`:\n\n    I can highlight `css±.some-class { background-color: red }` with CSS syntax.\n\nThis will be rendered in a `<code class=language-css>` with just the (syntax\nhighlighted) text of `.some-class { background-color: red }`\n\n### Disabling syntax highlighting\n\nIf you need to prevent any escaping or highlighting, you can use the `none`\nlanguage; the inner contents will not be changed at all.\n\n## Implementation notes\n\n### Line highlighting\n\nPlease note that we do _not_ use PrismJS's\n[line highlighting plugin](http://prismjs.com/plugins/line-highlight/). Here's\nwhy:\n\n- [PrismJS plugins][3] assume you're running things client side, but we are\n  _build-time folks_.\n- PrismJS's line highlighting plugin [implementation][1] does not allow for\n  solid background colors or 100% wide backgrounds that are drawn beyond the\n  _visible part_ of the container when content is overflowing.\n\nOur approach follows the [Pygments-based][2] implementation of the [React\nTutorial/Documentation][4] for line highlights:\n\n- It uses a wrapper element `<div class=\"gatsby-highlight\">` around the\n  PrismJS-formatted `<pre><code>`-blocks.\n- Highlighted lines are wrapped in `<span class=\"gatsby-highlight-code-line\">`.\n- We insert a linebreak before the closing tag of `.gatsby-highlight-code-line`\n  so it ends up at the start of the following line.\n\nWith all of this in place, we can apply `float:left; min-width:100%` to `<pre>`,\nthrow our overflow and background on `.gatsby-highlight`, and use\n`display:block` on `.gatsby-highlight-code-line` – all of this coming together\nto facilitate the desired line highlight behavior.\n\n### Line numbering\n\nBecause [the line numbering PrismJS plugin][7] runs client-side, a few adaptations were required to make it work:\n\n- A class `.line-numbers` is dynamically added to the `<pre>` element.\n- A new node `<span class=\"line-numbers-rows\">` is added right before the closing `</pre>`\n  containing as many empty `<span>`s as there are lines.\n\nSee the [client-side PrismJS implementation][8] for reference.\n\n[1]: https://github.com/PrismJS/prism/tree/8eb0ab6f76484ca47fa7acbf77657fab17b03ca7/plugins/line-highlight\n[2]: https://github.com/facebook/react/blob/00ba97a354e841701b4b83983c3a3904895e7b87/docs/_config.yml#L10\n[3]: http://prismjs.com/#plugins\n[4]: https://facebook.github.io/react/tutorial/tutorial.html\n[5]: https://github.com/PrismJS/prism/tree/1d5047df37aacc900f8270b1c6215028f6988eb1/themes\n[6]: http://prismjs.com/\n[7]: https://prismjs.com/plugins/line-numbers/\n[8]: https://github.com/PrismJS/prism/blob/master/plugins/line-numbers/prism-line-numbers.js#L69-L115\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-remark-prismjs"
  },
  "scripts": {
    "build": "babel src --out-dir . --ignore **/__tests__",
    "prepare": "cross-env NODE_ENV=production npm run build",
    "watch": "babel -w src --out-dir . --ignore **/__tests__"
  },
  "version": "3.2.9"
}
