{
  "_args": [
    [
      {
        "raw": "gatsby-source-filesystem@^2.0.1",
        "scope": null,
        "escapedName": "gatsby-source-filesystem",
        "name": "gatsby-source-filesystem",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher"
    ]
  ],
  "_from": "gatsby-source-filesystem@^2.0.1",
  "_hasShrinkwrap": false,
  "_id": "gatsby-source-filesystem@2.0.33",
  "_location": "/gatsby-source-filesystem",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gatsby-source-filesystem_2.0.33_1556607954722_0.8520578815146984"
  },
  "_npmUser": {
    "name": "wardpeet",
    "email": "ward@coding-tech.com"
  },
  "_npmVersion": "lerna/3.10.7/node@v10.15.3+x64 (win32)",
  "_phantomChildren": {
    "decompress-response": "3.3.0",
    "duplexer3": "0.1.4",
    "get-stream": "3.0.0",
    "is-plain-obj": "1.1.0",
    "is-retry-allowed": "1.1.0",
    "is-stream": "1.1.0",
    "isurl": "1.0.0",
    "lowercase-keys": "1.0.1",
    "p-cancelable": "0.3.0",
    "p-timeout": "1.2.1",
    "safe-buffer": "5.1.2",
    "timed-out": "4.0.1",
    "url-parse-lax": "1.0.0",
    "url-to-options": "1.0.1",
    "with-open-file": "0.1.6"
  },
  "_requested": {
    "raw": "gatsby-source-filesystem@^2.0.1",
    "scope": null,
    "escapedName": "gatsby-source-filesystem",
    "name": "gatsby-source-filesystem",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gatsby-source-filesystem/-/gatsby-source-filesystem-2.0.33.tgz",
  "_shasum": "c8b4ed9a231a325ca356f739bab77ea8fad5824d",
  "_shrinkwrap": null,
  "_spec": "gatsby-source-filesystem@^2.0.1",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher",
  "author": {
    "name": "Kyle Mathews",
    "email": "mathews.kyle@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gatsbyjs/gatsby/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.0.0",
    "better-queue": "^3.8.7",
    "bluebird": "^3.5.0",
    "chokidar": "2.1.2",
    "file-type": "^10.2.0",
    "fs-extra": "^5.0.0",
    "got": "^7.1.0",
    "md5-file": "^3.1.1",
    "mime": "^2.2.0",
    "pretty-bytes": "^4.0.2",
    "progress": "^1.1.8",
    "read-chunk": "^3.0.0",
    "slash": "^1.0.0",
    "valid-url": "^1.0.9",
    "xstate": "^3.1.0"
  },
  "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
  "devDependencies": {
    "@babel/cli": "^7.0.0",
    "@babel/core": "^7.0.0",
    "babel-preset-gatsby-package": "^0.1.4",
    "cross-env": "^5.1.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-GH/Y8dJ/+EKie3ckMrcHn1MsYcLVNbglCKNoTaDuY31rFCh3gq6310bdi8u//J+dcgcz7ggHXTN0W7FXxWF9FQ==",
    "shasum": "c8b4ed9a231a325ca356f739bab77ea8fad5824d",
    "tarball": "https://registry.npmjs.org/gatsby-source-filesystem/-/gatsby-source-filesystem-2.0.33.tgz",
    "fileCount": 14,
    "unpackedSize": 51664,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcx/PTCRA9TVsSAnZWagAAp/sP/1yZxcZx7qkfRQMF+0Tv\nzXHTvLTDq3DU1s8LRP8Ldp+XY4697gEXFLGzonea2/+6IBZtRmGGD5+n+iSb\nzws0oWh/4JlaojyC4nAVc08JOIuRj2JopgZRB2/uqEPSgbsS4HSUDuR9/zYN\nMR5xRIhcThiG7WKXDs4ll4GFTArD55NzBZ5uPu3Cn+XCORaMQ8s5X2fKg7qM\nA3FnNnm/4BqinVK3V29FjQhnhlbAlfQd+ZI6t3yUWRiU+BJMfpBm4tKgZwWW\nkYJdtzm5JDEBvOqwkfgoobMb1hTYUrut71bMhqgxPJ6VF+4mcz/wUY8fld2g\nF3J6a52ZzM6AtS24DfepxwwKIsuGDg7fB/EoMG4Mqcy3iAoz0Vz9IiCkBqrY\niIDdwFDtkA/yRwZnKS1sASjkIeUq/TueT6bqAH4xL4R3jRLP9UZxZBLLfNAH\nXr//s1aFyDt26g9ouI4gFSpYChW62XXwQi/h0iftDXRpzV/c9cGPfiQ1/zY2\nt332GsgkO+MmZWUb/UWPMWF2C214KSabB04XSUy/FbX3EhEy+okPk9znogJv\nzmnhhZLZABLNoQ8/z+i4008uDPbcAjirH7qzJjlpbXHVkVeuGGo0mfkMZ2Hv\nYnLoK6Nwn0luaa2U3ODJZPRf2i0EEm9LG/TpQ27rw5pEXCSC53Tj63uqb9iv\nlWL/\r\n=A4WY\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "41928aaafcf266f388d8c8a36cd926640adb90e2",
  "homepage": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-filesystem#readme",
  "keywords": [
    "gatsby",
    "gatsby-plugin"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "dschau",
      "email": "dustinschau@gmail.com"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    },
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    },
    {
      "name": "m-allanson",
      "email": "michael.allanson@gmail.com"
    },
    {
      "name": "monastic.panic",
      "email": "monastic.panic@gmail.com"
    },
    {
      "name": "moocar",
      "email": "anthony@moocar.me"
    },
    {
      "name": "pieh",
      "email": "misiek.piechowiak@gmail.com"
    },
    {
      "name": "sidharthachatterjee",
      "email": "me@sidharthachatterjee.com"
    },
    {
      "name": "wardpeet",
      "email": "ward@coding-tech.com"
    }
  ],
  "name": "gatsby-source-filesystem",
  "optionalDependencies": {},
  "peerDependencies": {
    "gatsby": "^2.0.0"
  },
  "readme": "# gatsby-source-filesystem\n\nA Gatsby source plugin for sourcing data into your Gatsby application\nfrom your local filesystem.\n\nThe plugin creates `File` nodes from files. The various \"transformer\"\nplugins can transform `File` nodes into various other types of data e.g.\n`gatsby-transformer-json` transforms JSON files into JSON data nodes and\n`gatsby-transformer-remark` transforms markdown files into `MarkdownRemark`\nnodes from which you can query an HTML representation of the markdown.\n\n## Install\n\n`npm install --save gatsby-source-filesystem`\n\n## How to use\n\n```javascript\n// In your gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // You can have multiple instances of this plugin\n    // to read source nodes from different locations on your\n    // filesystem.\n    //\n    // The following sets up the Jekyll pattern of having a\n    // \"pages\" directory for Markdown files and a \"data\" directory\n    // for `.json`, `.yaml`, `.csv`.\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `pages`,\n        path: `${__dirname}/src/pages/`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `data`,\n        path: `${__dirname}/src/data/`,\n        ignore: [`**/\\.*`], // ignore files starting with a dot\n      },\n    },\n  ],\n}\n```\n\n## Options\n\nIn addition to the name and path parameters you may pass an optional `ignore` array of file globs to ignore.\n\nThey will be added to the following default list:\n\n```\n**/*.un~\n**/.DS_Store\n**/.gitignore\n**/.npmignore\n**/.babelrc\n**/yarn.lock\n**/node_modules\n../**/dist/**\n```\n\n## How to query\n\nYou can query file nodes like the following:\n\n```graphql\n{\n  allFile {\n    edges {\n      node {\n        extension\n        dir\n        modifiedTime\n      }\n    }\n  }\n}\n```\n\nTo filter by the `name` you specified in the config, use `sourceInstanceName`:\n\n```graphql\n{\n  allFile(filter: { sourceInstanceName: { eq: \"data\" } }) {\n    edges {\n      node {\n        extension\n        dir\n        modifiedTime\n      }\n    }\n  }\n}\n```\n\n## Helper functions\n\n`gatsby-source-filesystem` exports two helper functions:\n\n- `createFilePath`\n- `createRemoteFileNode`\n\n### createFilePath\n\nWhen building pages from files, you often want to create a URL from a file's path on the file system. E.g. if you have a markdown file at `src/content/2018-01-23-an-exploration-of-the-nature-of-reality/index.md`, you might want to turn that into a page on your site at `example.com/2018-01-23-an-exploration-of-the-nature-of-reality/`. `createFilePath` is a helper function to make this task easier.\n\n```javascript\ncreateFilePath({\n  // The node you'd like to convert to a path\n  // e.g. from a markdown, JSON, YAML file, etc\n  node:\n  // Method used to get a node\n  // The parameter from `onCreateNode` should be passed in here\n  getNode:\n  // The base path for your files.\n  // Defaults to `src/pages`. For the example above, you'd use `src/content`.\n  basePath:\n  // Whether you want your file paths to contain a trailing `/` slash\n  // Defaults to true\n  trailingSlash:\n})\n```\n\n#### Example usage\n\nThe following is taken from [Gatsby Tutorial, Part Seven](https://www.gatsbyjs.org/tutorial/part-seven/) and is used to create URL slugs for markdown pages.\n\n```javascript\nconst { createFilePath } = require(`gatsby-source-filesystem`)\n\nexports.onCreateNode = ({ node, getNode, actions }) => {\n  const { createNodeField } = actions\n  // Ensures we are processing only markdown files\n  if (node.internal.type === \"MarkdownRemark\") {\n    // Use `createFilePath` to turn markdown files in our `data/faqs` directory into `/faqs/slug`\n    const relativeFilePath = createFilePath({\n      node,\n      getNode,\n      basePath: \"data/faqs/\",\n    })\n\n    // Creates new query'able field with name of 'slug'\n    createNodeField({\n      node,\n      name: \"slug\",\n      value: `/faqs${relativeFilePath}`,\n    })\n  }\n}\n```\n\n### createRemoteFileNode\n\nWhen building source plugins for remote data sources such as headless CMSs, their data will often link to files stored remotely that are often convenient to download so you can work with them locally.\n\nThe `createRemoteFileNode` helper makes it easy to download remote files and add them to your site's GraphQL schema.\n\n```javascript\ncreateRemoteFileNode({\n  // The source url of the remote file\n  url: `https://example.com/a-file.jpg`,\n\n  // The id of the parent node (i.e. the node to which the new remote File node will be linked to.\n  parentNodeId,\n\n  // The redux store which is passed to all Node APIs.\n  store,\n\n  // Gatsby's cache which the helper uses to check if the file has been downloaded already. It's passed to all Node APIs.\n  cache,\n\n  // The action used to create nodes\n  createNode,\n\n  // A helper function for creating node Ids\n  createNodeId,\n\n  // OPTIONAL\n  // Adds htaccess authentication to the download request if passed in.\n  auth: { htaccess_user: `USER`, htaccess_pass: `PASSWORD` },\n\n  // OPTIONAL\n  // Adds extra http headers to download request if passed in.\n  httpHeaders: { Authorization: `Bearer someAccessToken` },\n\n  // OPTIONAL\n  // Sets the file extension\n  ext: \".jpg\",\n})\n```\n\n#### Example usage\n\nThe following example is pulled from [gatsby-source-wordpress](https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-wordpress). Downloaded files are created as `File` nodes and then linked to the WordPress Media node, so it can be queried both as a regular `File` node and from the `localFile` field in the Media node.\n\n```javascript\nconst { createRemoteFileNode } = require(`gatsby-source-filesystem`)\n\nexports.downloadMediaFiles = ({\n  nodes,\n  store,\n  cache,\n  createNode,\n  createNodeId,\n  _auth,\n}) => {\n  nodes.map(async node => {\n    let fileNode\n    // Ensures we are only processing Media Files\n    // `wordpress__wp_media` is the media file type name for Wordpress\n    if (node.__type === `wordpress__wp_media`) {\n      try {\n        fileNode = await createRemoteFileNode({\n          url: node.source_url,\n          parentNodeId: node.id,\n          store,\n          cache,\n          createNode,\n          createNodeId,\n          auth: _auth,\n        })\n      } catch (e) {\n        // Ignore\n      }\n    }\n\n    // Adds a field `localFile` to the node\n    // ___NODE appendix tells Gatsby that this field will link to another node\n    if (fileNode) {\n      node.localFile___NODE = fileNode.id\n    }\n  })\n}\n```\n\nThe file node can then be queried using GraphQL. See an example of this in the [gatsby-source-wordpress README](/packages/gatsby-source-wordpress/#image-processing) where downloaded images are queried using [gatsby-transformer-sharp](/packages/gatsby-transformer-sharp/) to use in the component [gatsby-image](/packages/gatsby-image/).\n\n#### Retrieving the remote file name and extension\n\nThe helper tries first to retrieve the file name and extension by parsing the url and the path provided (e.g. if the url is https://example.com/image.jpg, the extension will be inferred as `.jpg` and the name as `image`). If the url does not contain an extension, we use the [`file-type`](https://www.npmjs.com/package/file-type) package to infer the file type. Finally, the name and the extension _can_ be explicitly passed, like so:\n\n```javascript\ncreateRemoteFileNode({\n  // The source url of the remote file\n  url: `https://example.com/a-file-without-an-extension`,\n  parentNodeId: node.id,\n  store,\n  cache,\n  createNode,\n  createNodeId,\n  // if necessary!\n  ext: \".jpg\",\n  name: \"image\",\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-source-filesystem"
  },
  "scripts": {
    "build": "babel src --out-dir . --ignore **/__tests__",
    "prepare": "cross-env NODE_ENV=production npm run build",
    "watch": "babel -w src --out-dir . --ignore **/__tests__"
  },
  "types": "index.d.ts",
  "version": "2.0.33"
}
