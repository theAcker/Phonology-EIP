{
  "_args": [
    [
      {
        "raw": "fontfaceobserver@^2.0.13",
        "scope": null,
        "escapedName": "fontfaceobserver",
        "name": "fontfaceobserver",
        "rawSpec": "^2.0.13",
        "spec": ">=2.0.13 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher"
    ]
  ],
  "_from": "fontfaceobserver@^2.0.13",
  "_hasShrinkwrap": false,
  "_id": "fontfaceobserver@2.1.0",
  "_location": "/fontfaceobserver",
  "_nodeVersion": "10.14.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fontfaceobserver_2.1.0_1543690187981_0.38318503763166145"
  },
  "_npmUser": {
    "name": "bramstein",
    "email": "b.l.stein@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fontfaceobserver@^2.0.13",
    "scope": null,
    "escapedName": "fontfaceobserver",
    "name": "fontfaceobserver",
    "rawSpec": "^2.0.13",
    "spec": ">=2.0.13 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/fontfaceobserver/-/fontfaceobserver-2.1.0.tgz",
  "_shasum": "e2705d293e2c585a6531c2a722905657317a2991",
  "_shrinkwrap": null,
  "_spec": "fontfaceobserver@^2.0.13",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher",
  "author": {
    "name": "Bram Stein",
    "email": "b.l.stein@gmail.com",
    "url": "http://www.bramstein.com/"
  },
  "bugs": {
    "url": "https://github.com/bramstein/fontfaceobserver/issues"
  },
  "dependencies": {},
  "description": "Detect if web fonts are available",
  "devDependencies": {
    "closure-dom": "=0.2.6",
    "extend": "^3.0.0",
    "google-closure-compiler": "=20161024.0.0",
    "grunt": "^1.0.3",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-exec": "~1.0.0",
    "mocha": "^5.2.0",
    "mocha-phantomjs-core": "^2.0.0",
    "phantomjs-prebuilt": "^2.1.7",
    "promis": "=1.1.4",
    "sinon": "^1.17.4",
    "unexpected": "^10.14.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-ReOsO2F66jUa0jmv2nlM/s1MiutJx/srhAe2+TE8dJCMi02ZZOcCTxTCQFr3Yet+uODUtnr4Mewg+tNQ+4V1Ng==",
    "shasum": "e2705d293e2c585a6531c2a722905657317a2991",
    "tarball": "https://registry.npmjs.org/fontfaceobserver/-/fontfaceobserver-2.1.0.tgz",
    "fileCount": 9,
    "unpackedSize": 33631,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcAtfMCRA9TVsSAnZWagAAN3YP/3PE2ZzqbVmyKVZXpOUH\nVzPv2p5bff9lVJHRoam6DA3hc/WZKQqz33Rx57iqH5lD41QN/1x3PdH9IKN8\n/28/1J4yK6sfrwl0j24rzRkZMyBdec82tx8FNaC+VWxWTPc5d6davqHNNd5P\n8fbyJbloraEYxCB6oaL0hytmf4VGRpCm2gtPvSWGPYwST5gnw9IdySqe5Amy\nl2moo5QpKmQAoTlLtraPFd8/XW2DT1Bn2WMueSslcr/JsA39rmBWEhUe4g22\nf5uM8vj/sI1clCCXCKWokaKvSSjg/XTMXiGyjgxpirbGDamkpGzcKWvfPdUC\nT1zZ17JGjnYVgRbOT8JMgYeWHvN6ytqckvo7aS7jRmJUuGM9/a6OzNt0biKJ\n1zqhLTqMdUjQAKSVFmUTD3OU047/+UdjAnxiPUgU5erPa7XbsYbAfcP3/Sgd\niPFN8sH6oFuXgi7Dn+LnLj/AzlnL80lzDcAyB8cLkjM/3YCRBbrBbhAs3lyp\nfjJR6PZNiKECQVLfqrswWfXJhp2qjZ+oSPvKZ9piMQQFl8pzOTdAf/52T3p/\n8OEvrFVh47aINunwZH5PKBzCu7H0QTY+INrTFshVs5lCvMnuWJzxckd+8ynS\n/pcbnMs7bXn3fbxsNCpGCrc1vJ62OM8+UDw9qV+mQSehss/lYJgM1rUX4f8q\n44V8\r\n=+zQ9\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "fontfaceobserver.js",
    "fontfaceobserver.standalone.js",
    "src/*.js",
    "externs.js"
  ],
  "gitHead": "20e40d09331510957d238f55790c83670de40af1",
  "homepage": "https://fontfaceobserver.com/",
  "keywords": [
    "fontloader",
    "fonts",
    "font",
    "font-face",
    "web font",
    "font load",
    "font events"
  ],
  "license": "BSD-3-Clause",
  "main": "fontfaceobserver.standalone.js",
  "maintainers": [
    {
      "name": "bramstein",
      "email": "b.l.stein@gmail.com"
    }
  ],
  "name": "fontfaceobserver",
  "optionalDependencies": {},
  "readme": "# Font Face Observer [![Build Status](https://travis-ci.org/bramstein/fontfaceobserver.png?branch=master)](https://travis-ci.org/bramstein/fontfaceobserver)\n\nFont Face Observer is a small `@font-face` loader and monitor (3.5KB minified and 1.3KB gzipped) compatible with any webfont service. It will monitor when a webfont is loaded and notify you. It does not limit you in any way in where, when, or how you load your webfonts. Unlike the [Web Font Loader](https://github.com/typekit/webfontloader) Font Face Observer uses scroll events to detect font loads efficiently and with minimum overhead.\n\n## How to use\n\nInclude your `@font-face` rules as usual. Fonts can be supplied by either a font service such as [Google Fonts](http://www.google.com/fonts), [Typekit](http://typekit.com), and [Webtype](http://webtype.com) or be self-hosted. You can set up monitoring for a single font family at a time:\n\n```js\nvar font = new FontFaceObserver('My Family', {\n  weight: 400\n});\n\nfont.load().then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available');\n});\n```\n\nThe `FontFaceObserver` constructor takes two arguments: the font-family name (required) and an object describing the variation (optional). The object can contain `weight`, `style`, and `stretch` properties. If a property is not present it will default to `normal`. To start loading the font, call the `load` method. It'll immediately return a new Promise that resolves when the font is loaded and rejected when the font fails to load.\n\nIf your font doesn't contain at least the latin \"BESbwy\" characters you must pass a custom test string to the `load` method.\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load('中国').then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available');\n});\n```\n\nThe default timeout for giving up on font loading is 3 seconds. You can increase or decrease this by passing a number of milliseconds as the second parameter to the `load` method.\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load(null, 5000).then(function () {\n  console.log('Font is available');\n}, function () {\n  console.log('Font is not available after waiting 5 seconds');\n});\n```\n\nMultiple fonts can be loaded by creating a `FontFaceObserver` instance for each.\n\n```js\nvar fontA = new FontFaceObserver('Family A');\nvar fontB = new FontFaceObserver('Family B');\n\nfontA.load().then(function () {\n  console.log('Family A is available');\n});\n\nfontB.load().then(function () {\n  console.log('Family B is available');\n});\n```\n\nYou may also load both at the same time, rather than loading each individually.\n\n```js\nvar fontA = new FontFaceObserver('Family A');\nvar fontB = new FontFaceObserver('Family B');\n\nPromise.all([fontA.load(), fontB.load()]).then(function () {\n  console.log('Family A & B have loaded');\n});\n```\n\nIf you are working with a large number of fonts, you may decide to create `FontFaceObserver` instances dynamically:\n\n```js\n// An example collection of font data with additional metadata,\n// in this case “color.”\nvar exampleFontData = {\n  'Family A': { weight: 400, color: 'red' },\n  'Family B': { weight: 400, color: 'orange' },\n  'Family C': { weight: 900, color: 'yellow' },\n  // Etc.\n};\n\nvar observers = [];\n\n// Make one observer for each font,\n// by iterating over the data we already have\nObject.keys(exampleFontData).forEach(function(family) {\n  var data = exampleFontData[family];\n  var obs = new FontFaceObserver(family, data);\n  observers.push(obs.load());\n});\n\nPromise.all(observers)\n  .then(function(fonts) {\n    fonts.forEach(function(font) {\n      console.log(font.family + ' ' + font.weight + ' ' + 'loaded');\n\n      // Map the result of the Promise back to our existing data,\n      // to get the other properties we need.\n      console.log(exampleFontData[font.family].color);\n    });\n  })\n  .catch(function(err) {\n    console.warn('Some critical font are not available:', err);\n  });\n```\n\nThe following example emulates FOUT with Font Face Observer for `My Family`.\n\n```js\nvar font = new FontFaceObserver('My Family');\n\nfont.load().then(function () {\n  document.documentElement.className += \" fonts-loaded\";\n});\n```\n\n```css\n.fonts-loaded {\n  body {\n    font-family: My Family, sans-serif;\n  }\n}\n```\n\n## Installation\n\nIf you're using npm you can install Font Face Observer as a dependency:\n\n```shell\n$ npm install fontfaceobserver\n```\n\nYou can then require `fontfaceobserver` as a CommonJS (Browserify) module:\n\n```js\nvar FontFaceObserver = require('fontfaceobserver');\n\nvar font = new FontFaceObserver('My Family');\n\nfont.load().then(function () {\n  console.log('My Family has loaded');\n});\n```\n\nIf you're not using npm, grab `fontfaceobserver.js` or `fontfaceobserver.standalone.js` (see below) and include it in your project. It'll export a global `FontFaceObserver` that you can use to create new instances.\n\nFont Face Observer uses Promises in its API, so for [browsers that do not support promises](http://caniuse.com/#search=promise) you'll need to include a polyfill. If you use your own Promise polyfill you just need to include `fontfaceobserver.standalone.js` in your project. If you do not have an existing Promise polyfill you should use `fontfaceobserver.js` which includes a small Promise polyfill. Using the Promise polyfill adds roughly 1.4KB (500 bytes gzipped) to the file size.\n\n## Browser support\n\nFontFaceObserver has been tested and works on the following browsers:\n\n* Chrome (desktop & Android)\n* Firefox\n* Opera\n* Safari (desktop & iOS)\n* IE8+\n* Android WebKit\n\n## License\n\nFont Face Observer is licensed under the BSD License. Copyright 2014-2017 Bram Stein. All rights reserved.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bramstein/fontfaceobserver.git"
  },
  "scripts": {
    "postversion": "git push && git push --tags && rm -rf build && npm publish",
    "preversion": "npm test",
    "test": "grunt test",
    "version": "grunt dist && git add fontfaceobserver.js && git add fontfaceobserver.standalone.js"
  },
  "version": "2.1.0"
}
