{
  "_args": [
    [
      {
        "raw": "eslint-config-prettier@^2.9.0",
        "scope": null,
        "escapedName": "eslint-config-prettier",
        "name": "eslint-config-prettier",
        "rawSpec": "^2.9.0",
        "spec": ">=2.9.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher"
    ]
  ],
  "_from": "eslint-config-prettier@^2.9.0",
  "_hasShrinkwrap": false,
  "_id": "eslint-config-prettier@2.10.0",
  "_location": "/eslint-config-prettier",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/eslint-config-prettier_2.10.0_1534178156771_0.4172659255405824"
  },
  "_npmUser": {
    "name": "lydell",
    "email": "simon.lydell@gmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "eslint-config-prettier@^2.9.0",
    "scope": null,
    "escapedName": "eslint-config-prettier",
    "name": "eslint-config-prettier",
    "rawSpec": "^2.9.0",
    "spec": ">=2.9.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-2.10.0.tgz",
  "_shasum": "ec07bc1d01f87d09f61d3840d112dc8a9791e30b",
  "_shrinkwrap": null,
  "_spec": "eslint-config-prettier@^2.9.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher",
  "author": {
    "name": "Simon Lydell"
  },
  "bin": {
    "eslint-config-prettier-check": "bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/prettier/eslint-config-prettier/issues"
  },
  "dependencies": {
    "get-stdin": "^5.0.1"
  },
  "description": "Turns off all rules that are unnecessary or might conflict with Prettier.",
  "devDependencies": {
    "ava": "^0.23.0",
    "babel-eslint": "^7.2.3",
    "cross-spawn": "^5.1.0",
    "dedent": "^0.7.0",
    "eslint": "^4.12.0",
    "eslint-config-google": "^0.9.1",
    "eslint-plugin-flowtype": "^2.39.1",
    "eslint-plugin-prettier": "^2.3.1",
    "eslint-plugin-react": "^7.10.0",
    "eslint-plugin-standard": "^3.0.1",
    "prettier": "^1.8.2",
    "rimraf": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Mhl90VLucfBuhmcWBgbUNtgBiK955iCDK1+aHAz7QfDQF6wuzWZ6JjihZ3ejJoGlJWIuko7xLqNm8BA5uenKhA==",
    "shasum": "ec07bc1d01f87d09f61d3840d112dc8a9791e30b",
    "tarball": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-2.10.0.tgz",
    "fileCount": 10,
    "unpackedSize": 32859,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbcbNtCRA9TVsSAnZWagAAAhkP/1guql1K8a59pgUaSHz5\nZYzd9z/pIrU7VjKG5EJkntzOBLhkqDs121OIgAY/p2PUxC60B2Uu3KQ06eVp\nWMCtm2vItB/WzP00R5o9AncH/XM1cAjTRfdRyCBfkiwUXO5WPYtCiks+Z5dB\ncTwYlHXhKvMe6M8wcgyNOET6P1pO9hKvZA+uk57zxCpbZxZu+fOYTWxjJJOv\nrrPMFecxSTKwUrl604o9Omrgw5kUwrjfuiLjESa6c2/ajR28DYb+qzc3oZ3w\nQ6EG11Nqz5BakX0zswCeMD+dEDlOAwDU4EraTHiYRt+yvVnCdF9D0jWZHlTZ\n52p77YBd/WS+fcAh1nx18E5S2pLsAYoivFakc3ItNYroSejtQIwNzvZ8lb14\nQ4CDZB7pgDR4qvsOi4hB6nSsjTucKDbBK4l9NpW/nWdGxAaVpYE9h2KUBFbd\nXV5BzQx98NQga4ZmcWj97oei4SI7exf01KMOvLMiFDRMJJD9rJneS/OfO6mO\naggAOEu9DVCGYaFBOXP/NlKUlKkaYgqd7cmfQoxVlKDbiEWLzy1OmMk7jhUX\nCsk4V3XT/k1yYgIoM4swBXOZ0vXIEpgM8uismer62vAeeyPjhUmUrw/G4QGs\nj27R4hHsBC++WIIrOlTdg4gJugSLFbtWf6+jQTx4C1RyqhRsmtrYJ8edzT/V\nzhSq\r\n=IhK7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "bin/",
    "flowtype.js",
    "index.js",
    "react.js",
    "standard.js"
  ],
  "gitHead": "9f427798963dd5e0e6d5c1f14de6e383a4567a5d",
  "homepage": "https://github.com/prettier/eslint-config-prettier#readme",
  "keywords": [
    "eslint",
    "eslintconfig",
    "prettier"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "lydell",
      "email": "simon.lydell@gmail.com"
    }
  ],
  "name": "eslint-config-prettier",
  "optionalDependencies": {},
  "peerDependencies": {
    "eslint": ">=3.14.1"
  },
  "readme": "# eslint-config-prettier [![Build Status][travis-badge]][travis]\n\nTurns off all rules that are unnecessary or might conflict with [Prettier].\n\nThis lets you use you favorite shareable config without letting its stylistic\nchoices get in the way when using Prettier.\n\n## Installation\n\nTip: First, you might be interested in installing [eslint-plugin-prettier].\nFollow the instructions over there. This is optional, though.\n\nInstall eslint-config-prettier:\n\n```\n$ npm install --save-dev eslint-config-prettier\n```\n\nThen, add eslint-config-prettier to the \"extends\" array in your `.eslintrc.*`\nfile. Make sure to put it **last,** so it gets the chance to override other\nconfigs.\n\n```json\n{\n  \"extends\": [\n    \"prettier\"\n  ]\n}\n```\n\nA few ESLint plugins are supported as well:\n\n- [eslint-plugin-flowtype]\n- [eslint-plugin-react]\n- [eslint-plugin-standard]\n\nAdd extra exclusions for the plugins you use like so:\n\n```json\n{\n  \"extends\": [\n    \"prettier\",\n    \"prettier/flowtype\",\n    \"prettier/react\",\n    \"prettier/standard\"\n  ]\n}\n```\n\n## CLI helper tool\n\neslint-config-prettier also ships with a little CLI tool to help you check if\nyour configuration contains any rules that are unnecessary or conflict with\nPrettier.\n\nFirst, add a script for it to package.json:\n\n```json\n{\n  \"scripts\": {\n    \"eslint-check\": \"eslint --print-config .eslintrc.js | eslint-config-prettier-check\"\n  }\n}\n```\n\nThen run `npm run eslint-check`.\n\n(Swap out .eslintrc.js with the path to your config if needed.)\n\nExit codes:\n\n- 0: No problems found.\n- 1: Unexpected error.\n- 2: Conflicting rules found.\n\n## Example configuration\n\n```json\n{\n  \"extends\": [\n    \"standard\",\n    \"plugin:flowtype/recommended\",\n    \"plugin:react/recommended\",\n    \"prettier\",\n    \"prettier/flowtype\",\n    \"prettier/react\",\n    \"prettier/standard\"\n  ],\n  \"plugins\": [\n    \"flowtype\",\n    \"react\",\n    \"prettier\",\n    \"standard\"\n  ],\n  \"parserOptions\": {\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"env\": {\n    \"es6\": true,\n    \"node\": true\n  },\n  \"rules\": {\n    \"prettier/prettier\": \"error\"\n  }\n}\n```\n\n## Special rules\n\nThere a few rules that eslint-config-prettier disables that actually can be\nenabled in some cases.\n\n- Some require certain options. The CLI helper tool validates this.\n- Some require special attention when writing code. The CLI helper tool warns\n  you if any of those rules are enabled, but can’t tell if anything is\n  problematic.\n\nFor maximum ease of use, the special rules are disabled by default. If you want\nthem, you need to explicitly specify them in your ESLint config.\n\n### [curly]\n\n**This rule requires certain options.**\n\nIf a block (for example after `if`, `else`, `for` or `while`) contains only one\nstatement, JavaScript allows omitting the curly braces around that statement.\nThis rule enforces if or when those optional curly braces should be omitted.\n\nIf you use the `\"multi-line\"` or `\"multi-or-nest\"` option, the rule can conflict\nwith Prettier.\n\nFor example, the `\"multi-line\"` option allows this line:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0) updateCart(cart);\n```\n\nHowever, Prettier might consider the line too long and turn it into the\nfollowing, which the `\"multi-line\"` option does _not_ allow:\n\n```js\nif (cart.items && cart.items[0] && cart.items[0].quantity === 0)\n  updateCart(cart);\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you\ndon’t use the `\"multi-line\"` or `\"multi-or-nest\"` option.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"curly\": [\"error\", \"all\"]\n  }\n}\n```\n\n### [lines-around-comment]\n\n**This rule can be used with certain options.**\n\nThis rule requires empty lines before and/or after comments. Prettier preserves\nblank lines, with two exceptions:\n\n- Several blank lines in a row are collapsed into a single blank line. This is\n  fine.\n- Blank lines at the beginning and end of blocks, objects and arrays are always\n  removed. This may lead to conflicts.\n\nBy default, ESLint requires a blank line above the comment is this case:\n\n```js\nif (result) {\n\n  /* comment */\n  return result;\n}\n```\n\nHowever, Prettier removes the blank line:\n\n```js\nif (result) {\n  /* comment */\n  return result;\n}\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as you add\nsome extra configuration to allow comments at the start and end of blocks,\nobjects and arrays.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"lines-around-comment\": [\n      \"error\",\n      {\n        \"beforeBlockComment\": true,\n        \"afterBlockComment\": true,\n        \"beforeLineComment\": true,\n        \"afterLineComment\": true,\n        \"allowBlockStart\": true,\n        \"allowBlockEnd\": true,\n        \"allowObjectStart\": true,\n        \"allowObjectEnd\": true,\n        \"allowArrayStart\": true,\n        \"allowArrayEnd\": true\n      }\n    ]\n  }\n}\n```\n\n### [max-len]\n\n**This rule requires special attention when writing code.**\n\nUsually, Prettier takes care of following a maximum line length automatically.\nHowever, there are cases where Prettier can’t do anything, such as for long\nstrings, regular expressions and comments. Those need to be split up by a human.\n\nIf you’d like to enforce an even stricter maximum line length policy than\nPrettier can provide automatically, you can enable this rule. Just remember to\nkeep `max-len`’s options and Prettier’s `printWidth` option in sync.\n\nKeep in mind that you might have to refactor code slightly if Prettier formats\nlines in a way that the `max-len` rule does not approve of.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"max-len\": [\"error\", {\"code\": 80, \"ignoreUrls\": true}]\n  }\n}\n```\n\n### [no-confusing-arrow]\n\n**This rule requires certain options.**\n\nFor example, the rule could warn about this line:\n\n```js\nvar x = a => 1 ? 2 : 3;\n```\n\nBy default, ESLint suggests switching to an explicit return:\n\n```js\nvar x = a => { return 1 ? 2 : 3; };\n```\n\nThat causes no problems with Prettier.\n\nWith `{allowParens: true}`, adding parentheses is also considered a valid way to\navoid the arrow confusion:\n\n```js\nvar x = a => (1 ? 2 : 3);\n```\n\nWhile Prettier keeps thoses parentheses, it removes them if the line is long\nenough to introduce a line break:\n\n```js\nEnterpriseCalculator.prototype.calculateImportantNumbers = inputNumber =>\n  1 ? 2 : 3;\n```\n\nIf you like this rule, it can be used just fine with Prettier as long as the\n`allowParens` option is off.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-confusing-arrow\": \"error\"\n  }\n}\n```\n\n### [no-mixed-operators]\n\n**This rule requires special attention when writing code.**\n\nThis rule forbids mixing certain operators, such as `&&` and `||`.\n\nFor example, the rule could warn about this line:\n\n```js\nvar foo = a + b * c;\n```\n\nThe rule suggests adding parentheses, like this:\n\n```js\nvar foo = a + (b * c);\n```\n\nHowever, Prettier removes many “unnecessary” parentheses, turning it back to:\n\n```js\nvar foo = a + b * c;\n```\n\nIf you want to use this rule with Prettier, you need to split the expression\ninto another variable:\n\n```js\nvar bar = b * c;\nvar foo = a + bar;\n```\n\nKeep in mind that Prettier prints _some_ “unnecessary” parentheses, though:\n\n```js\nvar foo = (a && b) || c;\n```\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-mixed-operators\": \"error\"\n  }\n}\n```\n\n### [no-tabs]\n\n**This rule requires certain Prettier options.**\n\nThis rule disallows the use of tab characters at all. It can be used just fine\nwith Prettier as long as you don’t configure Prettier to indent using tabs.\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-tabs\": \"error\"\n  }\n}\n```\n\n### [no-unexpected-multiline]\n\n**This rule requires special attention when writing code.**\n\nThis rule disallows confusing multiline expressions where a newline looks like\nit is ending a statement, but is not.\n\nFor example, the rule could warn about this:\n\n```js\nvar hello = \"world\"\n[1, 2, 3].forEach(addNumber)\n```\n\nPrettier usually formats this in a way that makes it obvious that a semicolon\nwas missing:\n\n```js\nvar hello = \"world\"[(1, 2, 3)].forEach(addNumber);\n```\n\nHowever, there are cases where Prettier breaks things into several lines such\nthat the `no-unexpected-multiline` conflicts.\n\n```js\nconst value = text.trim().split(\"\\n\")[position].toLowerCase();\n```\n\nPrettier breaks it up into several lines, though, causing a conflict:\n\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  [position].toLowerCase();\n```\n\nIf you like this rule, it can usually be used with Prettier without problems,\nbut occasionally you might need to either temporarily disable the rule or\nrefactor your code.\n\n```js\nconst value = text\n  .trim()\n  .split(\"\\n\")\n  // eslint-disable-next-line no-unexpected-multiline\n  [position].toLowerCase();\n\n// Or:\n\nconst lines = text.trim().split(\"\\n\");\nconst value = lines[position].toLowerCase();\n```\n\n**Note:** If you _do_ enable this rule, you have to run ESLint and Prettier as\ntwo separate steps (and ESLint first) in order to get any value out of it.\nOtherwise Prettier might reformat your code in such a way that ESLint never gets\na chance to report anything (as seen in the first example).\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"no-unexpected-multiline\": \"error\"\n  }\n}\n```\n\n### [quotes]\n\n**This rule requires certain options.**\n\nIf you’d like to enforce the use of backticks rather than single or double\nquotes for strings, you can enable this rule. Otherwise, there’s no need to.\nJust remember to enable the `\"backtick\"` option!\n\nExample configuration:\n\n```json\n{\n  \"rules\": {\n    \"quotes\": [\"error\", \"backtick\"]\n  }\n}\n```\n\n\n## Contributing\n\neslint-config-prettier has been tested with:\n\n- ESLint 4.12.0 (eslint-config-prettier 2.1.1 and older were tested with ESLint 3.x)\n- prettier 1.8.2\n- eslint-plugin-flowtype 2.39.1\n- eslint-plugin-react 7.10.0\n- eslint-plugin-standard 3.0.1\n\nHave new rules been added since those versions? Have we missed any rules? Is\nthere a plugin you would like to see exclusions for? Open an issue or a pull\nrequest!\n\nIf you’d like to add support for eslint-plugin-foobar, this is how you’d go\nabout it:\n\nFirst, create `foobar.js`:\n\n```js\n\"use strict\";\n\nmodule.exports = {\n  rules: {\n    \"foobar/some-rule\": \"off\"\n  }\n};\n```\n\nThen, create `test-lint/foobar.js`:\n\n```js\n/* eslint-disable quotes */\n\"use strict\";\n\n// Prettier does not want spaces before the parentheses, but\n// eslint-config-foobar wants one.\nconsole.log ();\n```\n\n`test-lint/foobar.js` must fail when used with eslint-plugin-foobar and\neslint-plugin-prettier at the same time – until `\"prettier/foobar\"` is added to\nthe \"extends\" property of an ESLint config.\n\nFinally, you need to mention the plugin in several places:\n\n- Add `\"foobar.js\"` to the \"files\" field in `package.json`.\n- Add eslint-plugin-foobar to the \"devDependencies\" field in `package.json`.\n- Make sure that at least one rule from eslint-plugin-foobar gets used in\n  `.eslintrc.base.js`.\n- Add it to the list of supported plugins, to the example config and to\n  Contributing section in `README.md`.\n\nWhen you’re done, run `npm test` to verify that you got it all right. It runs\nseveral other npm scripts:\n\n- `\"test:lint\"` makes sure that the files in `test-lint/` pass ESLint when\n  the exclusions from eslint-config-prettier are used. It also lints the code of\n  eslint-config-prettier itself.\n- `\"test:lint-verify-fail\"` is run by a test in `test/lint-verify-fail.js`.\n- `\"test:lint-rules\"` is run by a test in `test/rules.js`.\n- `\"test:ava\"` runs unit tests that check a number of things:\n  - That eslint-plugin-foobar is mentioned in all the places shown above.\n  - That no unknown rules are turned off. This helps catching typos, for\n    example.\n  - That the CLI works.\n- `\"test:cli-sanity\"` is a sanity check for the CLI.\n\n## License\n\n[MIT](LICENSE).\n\n[Prettier]: https://github.com/prettier/prettier\n[curly]: https://eslint.org/docs/rules/curly\n[eslint-plugin-flowtype]: https://github.com/gajus/eslint-plugin-flowtype\n[eslint-plugin-prettier]: https://github.com/prettier/eslint-plugin-prettier\n[eslint-plugin-react]: https://github.com/yannickcr/eslint-plugin-react\n[eslint-plugin-standard]: https://github.com/xjamundx/eslint-plugin-standard\n[lines-around-comment]: https://eslint.org/docs/rules/lines-around-comment\n[max-len]: https://eslint.org/docs/rules/max-len\n[no-confusing-arrow]: https://eslint.org/docs/rules/no-confusing-arrow\n[no-mixed-operators]: https://eslint.org/docs/rules/no-mixed-operators\n[no-tabs]: https://eslint.org/docs/rules/no-tabs\n[no-unexpected-multiline]: https://eslint.org/docs/rules/no-unexpected-multiline\n[quotes]: https://eslint.org/docs/rules/quotes\n[travis-badge]: https://travis-ci.org/prettier/eslint-config-prettier.svg?branch=master\n[travis]: https://travis-ci.org/prettier/eslint-config-prettier\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prettier/eslint-config-prettier.git"
  },
  "scripts": {
    "test": "npm run test:lint && npm run test:ava && npm run test:cli-sanity",
    "test:ava": "ava",
    "test:cli-sanity": "eslint --print-config .eslintrc.js | node ./bin/cli.js",
    "test:lint": "eslint .",
    "test:lint-rules": "eslint index.js --config test-config/.eslintrc.js --format json",
    "test:lint-verify-fail": "eslint test-lint/ --config .eslintrc.base.js --format json"
  },
  "version": "2.10.0"
}
