{
  "_args": [
    [
      {
        "raw": "arg@2.0.0",
        "scope": null,
        "escapedName": "arg",
        "name": "arg",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\serve"
    ]
  ],
  "_from": "arg@2.0.0",
  "_hasShrinkwrap": false,
  "_id": "arg@2.0.0",
  "_location": "/arg",
  "_nodeVersion": "9.6.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/arg_2.0.0_1522571220160_0.8013429191548453"
  },
  "_npmUser": {
    "name": "qix",
    "email": "i.am.qix@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "arg@2.0.0",
    "scope": null,
    "escapedName": "arg",
    "name": "arg",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/serve"
  ],
  "_resolved": "https://registry.npmjs.org/arg/-/arg-2.0.0.tgz",
  "_shasum": "c06e7ff69ab05b3a4a03ebe0407fac4cba657545",
  "_shrinkwrap": null,
  "_spec": "arg@2.0.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\serve",
  "author": {
    "name": "Josh Junon",
    "email": "junon@zeit.co"
  },
  "bugs": {
    "url": "https://github.com/zeit/arg/issues"
  },
  "dependencies": {},
  "description": "Another simple argument parser",
  "devDependencies": {
    "chai": "^4.1.1",
    "jest": "^20.0.4",
    "xo": "^0.18.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-XxNTUzKnz1ctK3ZIcI2XUPlD96wbHP2nGqkPKpvk/HNRlPveYrXIVSTk9m3LcqOgDPg3B1nMvdV/K8wZd7PG4w==",
    "shasum": "c06e7ff69ab05b3a4a03ebe0407fac4cba657545",
    "tarball": "https://registry.npmjs.org/arg/-/arg-2.0.0.tgz",
    "fileCount": 7,
    "unpackedSize": 130609
  },
  "gitHead": "507d9826349559ebbf425aa679207d18c5e51256",
  "homepage": "https://github.com/zeit/arg#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "arunoda",
      "email": "arunoda.susiripala@gmail.com"
    },
    {
      "name": "iamevilrabbit",
      "email": "hello@evilrabb.it"
    },
    {
      "name": "igorklopov",
      "email": "igor@klopov.com"
    },
    {
      "name": "jamo",
      "email": "jamo@isotalo.fi"
    },
    {
      "name": "javivelasco",
      "email": "javier.velasco86@gmail.com"
    },
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "lipp",
      "email": "gelipp@gmail.com"
    },
    {
      "name": "matheuss",
      "email": "me@matheus.top"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "olliv",
      "email": "olli@zeit.co"
    },
    {
      "name": "pranaygp",
      "email": "pranay.gp@gmail.com"
    },
    {
      "name": "qix",
      "email": "i.am.qix@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "sergiodxa",
      "email": "sergiodxa@gmail.com"
    },
    {
      "name": "timneutkens",
      "email": "tim@timneutkens.nl"
    },
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    },
    {
      "name": "zeit-admin",
      "email": "team@zeit.co"
    },
    {
      "name": "zeit-bot",
      "email": "npm-bot@zeit.co"
    }
  ],
  "name": "arg",
  "optionalDependencies": {},
  "readme": "# Arg\n\n`arg` is yet another command line option parser.\n\n## Installation\n\nUse Yarn or NPM to install.\n\n```console\n$ yarn add arg\n```\n\nor\n\n```console\n$ npm install arg\n```\n\n## Usage\n\n`arg()` takes either 1 or 2 arguments:\n\n1. Command line specification object (see below)\n2. Parse options (_Optional_, defaults to `{permissive: false, argv: process.argv.slice(2)}`)\n\nIt returns an object with any values present on the command-line (missing options are thus\nmissing from the resulting object). Arg performs no validation/requirement checking - we\nleave that up to the application.\n\nAll parameters that aren't consumed by options (commonly referred to as \"extra\" parameters)\nare added to `result._`, which is _always_ an array (even if no extra parameters are passed,\nin which case an empty array is returned).\n\n```javascript\nconst arg = require('arg');\n\n// `argument_array` is an optional parameter\nconst args = arg(spec, options = {permissive: false, argv: process.argv.slice(2)}]);\n```\n\nFor example:\n\n```console\n$ node ./hello.js --port=1234 -n 'My name' foo bar --tag qux --tag=qix -- --foobar\n```\n\n```javascript\n// hello.js\nconst arg = require('arg');\n\nconst args = arg({\n\t// Types\n\t'--help':    Boolean,\n\t'--version': Boolean,\n\t'--port':    Number,      // --port <number> or --port=<number>\n\t'--name':    String,      // --name <string> or --name=<string>\n\t'--tag':     [String],    // --tag <string> or --tag=<string>\n\n\t// Aliases\n\t'-v':        '--version',\n\t'-n':        '--name',    // -n <string>; result is stored in --name\n\t'--label':   '--name'     // --label <string> or --label=<string>;\n\t                          //     result is stored in --name\n});\n\nconsole.log(args);\n/*\n{\n\t_: [\"foo\", \"bar\", \"--foobar\"],\n\t'--port': 1234,\n\t'--name': \"My name\",\n\t'--tag': [\"qux\", \"qix\"]\n}\n*/\n```\n\nThe values for each key=&gt;value pair is either a type (function or [function]) or a string (indicating an alias).\n\n- In the case of a function, the string value of the argument's value is passed to it,\n  and the return value is used as the ultimate value.\n\n- In the case of an array, the only element _must_ be a type function. Array types indicate\n  that the argument may be passed multiple times, and as such the resulting value in the returned\n  object is an array with all of the values that were passed using the specified flag.\n\n- In the case of a string, an alias is established. If a flag is passed that matches the _key_,\n  then the _value_ is substituted in its place.\n\nType functions are passed three arguments:\n\n1. The parameter value (always a string)\n2. The parameter name (e.g. `--label`)\n3. The previous value for the destination (useful for reduce-like operatons or for supporting `-v` multiple times, etc.)\n\nThis means the built-in `String`, `Number`, and `Boolean` type constructors \"just work\" as type functions.\n\n### Options\n\nIf a second parameter is specified and is an object, it specifies parsing options to modify the behavior of `arg()`.\n\n#### `argv`\n\nIf you have already sliced or generated a number of raw arguments to be parsed (as opposed to letting `arg`\nslice them from `process.argv`) you may specify them in the `argv` option.\n\nFor example:\n\n```javascript\nconst args = arg(\n\t{\n\t\t'--foo': String\n\t}, {\n\t\targv: ['hello', '--foo', 'world']\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['hello'],\n\t'--foo': 'world'\n};\n```\n\n#### `permissive`\n\nWhen `permissive` set to `true`, `arg` will push any unknown arguments\nonto the \"extra\" argument array (`result._`) instead of throwing an error about\nan unknown flag.\n\nFor example:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--qux', 'qix', '--bar', '12345', 'hello again'];\n\nconst args = arg(\n\t{\n\t\t'--foo': String,\n\t\t'--bar': Number\n\t}, {\n\t\targv,\n\t\tpermissive: true\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_:          ['--qux', 'qix', 'hello again'],\n\t'--foo':    'hello',\n\t'--bar':    12345\n}\n```\n\n# License\n\nCopyright &copy; 2017-2018 by ZEIT, Inc. Released under the [MIT License](LICENSE.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/arg.git"
  },
  "scripts": {
    "pretest": "xo",
    "test": "WARN_EXIT=1 jest --coverage -w 2"
  },
  "version": "2.0.0",
  "xo": {
    "rules": {
      "complexity": 0
    }
  }
}
