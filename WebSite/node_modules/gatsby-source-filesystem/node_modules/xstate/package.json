{
  "_args": [
    [
      {
        "raw": "xstate@^3.1.0",
        "scope": null,
        "escapedName": "xstate",
        "name": "xstate",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-source-filesystem"
    ]
  ],
  "_from": "xstate@^3.1.0",
  "_hasShrinkwrap": false,
  "_id": "xstate@3.3.3",
  "_location": "/gatsby-source-filesystem/xstate",
  "_nodeVersion": "9.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/xstate_3.3.3_1531250185291_0.244904155786291"
  },
  "_npmUser": {
    "name": "davidkpiano",
    "email": "davidkpiano@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xstate@^3.1.0",
    "scope": null,
    "escapedName": "xstate",
    "name": "xstate",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gatsby-source-filesystem"
  ],
  "_resolved": "https://registry.npmjs.org/xstate/-/xstate-3.3.3.tgz",
  "_shasum": "64177cd4473d4c2424b3df7d2434d835404b09a9",
  "_shrinkwrap": null,
  "_spec": "xstate@^3.1.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-source-filesystem",
  "author": {
    "name": "David Khourshid",
    "email": "davidkpiano@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/davidkpiano/xstate/issues"
  },
  "dependencies": {},
  "description": "Simple JavaScript Finite State Machines and Statecharts",
  "devDependencies": {
    "@types/chai": "^4.0.4",
    "@types/mocha": "^2.2.44",
    "@types/node": "^8.9.4",
    "chai": "^4.1.2",
    "mocha": "^3.5.3",
    "prettier": "^1.13.5",
    "scxml-test-framework": "^1.0.2",
    "ts-node": "^3.3.0",
    "tslint": "^5.7.0",
    "typescript": "^2.9.2",
    "webpack": "^3.5.6",
    "xml-js": "^1.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-p0ZYDPWxZZZRAJyD3jaGO9/MYioHuxZp6sjcLhPfBZHAprl4EDrZRGDqRVH9VvK8oa6Nrbpf+U5eNmn8KFwO3g==",
    "shasum": "64177cd4473d4c2424b3df7d2434d835404b09a9",
    "tarball": "https://registry.npmjs.org/xstate/-/xstate-3.3.3.tgz",
    "fileCount": 132,
    "unpackedSize": 835265,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbRQYJCRA9TVsSAnZWagAAv1AP/jYdwZFk1aVkSfN5T7g1\nxPhUjuMkuq42mJ63Yc3YdBZ8HeF0NDWGNdcbvrfLRofKaaxJMf5I7BT2GYPF\n9VHiPEVbFVBLZF4D6usKtdXC8FWqFQI9CCbevaerxoh3+cLyPliBe+19z3zB\nG7TB7UIEOUiAd68zlQR79wQ0OF1koBILCAa0jwHO69QKLkYbPoNtw8cyLUha\nwkPFaR3nK4y/mj6U52ATVE4L/3p8TNfqIgXd9UeUpwAsKOXE5tmA2EtAj8EK\n2vDGK0jCzZ3rfrOzgAfroH5eiVfs+LJMFnj0sQqYqr23yIar74VukgtVL1Fb\nbn56WrOhYPwCptXb+iAm6g89TVLpRbIUM+/GpFrTA4uAPCVKm2j9UMbDlSHv\nnPBXx9UZi67uKMXsONn0pHdIIC7tyavm8T897NEtOOeHHIzKEDh+ZoY7AzE/\nzVfHxowbIOOSu7tY8tYEssa5dJIPerqY1vPaPyp60J0GrH4Wp0w0tEVIhuyr\nwCZG3fFDdcaejJqrEuu6GkHAjr8rVnhysi98H3sYhH5yUEUzFJQUsDDIvbAl\nESMUFi8p3XhLKW5qGMkA5LQwbAymZMUiTZ+bryU0twTW99ZlR/wtYSy4fRfm\n2RnJZyIkJhgDPpFqMEbpoz8UmKP3LPzb3EMd90myxwvj9BnC9gQAJU4mJ5vR\nGadT\r\n=odGt\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "49af78fd50b2445acb460195802a837cf0a04699",
  "homepage": "https://github.com/davidkpiano/xstate#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "davidkpiano",
      "email": "davidkpiano@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "xstate",
  "optionalDependencies": {},
  "readme": "# xstate\n\n[![Travis](https://img.shields.io/travis/davidkpiano/xstate.svg?style=flat-square)]()\n[![npm](https://img.shields.io/npm/v/xstate.svg?style=flat-square)]()\n[![Statecharts gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/statecharts/statecharts)\n\nFunctional, stateless JavaScript [finite state machines](https://en.wikipedia.org/wiki/Finite-state_machine) and [statecharts](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf).\n\nðŸ“– [Read the documentation!](http://davidkpiano.github.io/xstate/docs)\n\n- [Visualizer](#visualizer)\n- [3rd-Party Usage](#3rd-party-usage)\n- [Why? (info about statecharts)](#why)\n- [Installation](#installation)\n- [Finite State Machines](#finite-state-machines)\n- [Hierarchical (Nested) State Machines](#hierarchical-nested-state-machines)\n- [Parallel State Machines](#parallel-state-machines)\n- [History States](#history-states)\n- [Interpreters](#interpreters)\n\n## Visualizer\n\n**[:new: Preview and simulate your statecharts in the xstate visualizer (beta)!](https://bit.ly/xstate-viz)**\n\n<a href=\"https://bit.ly/xstate-viz\" title=\"xstate visualizer\"><img src=\"https://i.imgur.com/fOMJKDZ.png\" alt=\"xstate visualizer\" width=\"300\" /></a>\n\n## 3rd-Party Usage\n\nWith [sketch.systems](https://sketch.systems), you can now copy-paste your state machine sketches as `xstate`-compatible JSON!\n1. Create your sketch (example: https://sketch.systems/anon/sketch/new)\n2. Click **Export to clipboard...**\n3. Select `XState JSON`\n\n## Why?\nStatecharts are a formalism for modeling stateful, reactive systems. This is useful for declaratively describing the _behavior_ of your application, from the individual components to the overall application logic.\n\nRead [ðŸ“½ the slides](http://slides.com/davidkhourshid/finite-state-machines) ([ðŸŽ¥ video](https://www.youtube.com/watch?v=VU1NKX6Qkxc)) or check out these resources for learning about the importance of finite state machines and statecharts in user interfaces:\n\n- [Statecharts - A Visual Formalism for Complex Systems](http://www.inf.ed.ac.uk/teaching/courses/seoc/2005_2006/resources/statecharts.pdf) by David Harel\n- [The World of Statecharts](https://statecharts.github.io/) by Erik Mogensen\n- [Pure UI](https://rauchg.com/2015/pure-ui) by Guillermo Rauch\n- [Pure UI Control](https://medium.com/@asolove/pure-ui-control-ac8d1be97a8d) by Adam Solove\n- [Spectrum - Statecharts Community](https://spectrum.chat/statecharts)\n\n## Installation\n1. `npm install xstate --save`\n2. `import { Machine } from 'xstate';`\n\n## Finite State Machines\n\n<img src=\"https://imgur.com/rqqmkJh.png\" alt=\"Light Machine\" width=\"300\" />\n\n```js\nimport { Machine } from 'xstate';\n\nconst lightMachine = Machine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow',\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red',\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green',\n      }\n    }\n  }\n});\n\nconst currentState = 'green';\n\nconst nextState = lightMachine\n  .transition(currentState, 'TIMER')\n  .value;\n\n// => 'yellow'\n```\n\n## Hierarchical (Nested) State Machines\n\n<img src=\"https://imgur.com/GDZAeB9.png\" alt=\"Hierarchical Light Machine\" width=\"300\" />\n\n```js\nimport { Machine } from 'xstate';\n\nconst pedestrianStates = {\n  initial: 'walk',\n  states: {\n    walk: {\n      on: {\n        PED_TIMER: 'wait'\n      }\n    },\n    wait: {\n      on: {\n        PED_TIMER: 'stop'\n      }\n    },\n    stop: {}\n  }\n};\n\nconst lightMachine = Machine({\n  key: 'light',\n  initial: 'green',\n  states: {\n    green: {\n      on: {\n        TIMER: 'yellow'\n      }\n    },\n    yellow: {\n      on: {\n        TIMER: 'red'\n      }\n    },\n    red: {\n      on: {\n        TIMER: 'green'\n      },\n      ...pedestrianStates\n    }\n  }\n});\n\nconst currentState = 'yellow';\n\nconst nextState = lightMachine\n  .transition(currentState, 'TIMER')\n  .value;\n// => {\n//   red: 'walk'\n// }\n\nlightMachine\n  .transition('red.walk', 'PED_TIMER')\n  .value;\n// => {\n//   red: 'wait'\n// }\n```\n\n**Object notation for hierarchical states:**\n\n```js\n// ...\nconst waitState = lightMachine\n  .transition({ red: 'walk' }, 'PED_TIMER')\n  .value;\n\n// => { red: 'wait' }\n\nlightMachine\n  .transition(waitState, 'PED_TIMER')\n  .value;\n\n// => { red: 'stop' }\n\nlightMachine\n  .transition({ red: 'stop' }, 'TIMER')\n  .value;\n\n// => 'green'\n```\n\n## Parallel State Machines\n\n<img src=\"https://imgur.com/GKd4HwR.png\" width=\"300\" alt=\"Parallel state machine\" />\n\n```js\nconst wordMachine = Machine({\n  parallel: true,\n  states: {\n    bold: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_BOLD: 'off' }\n        },\n        off: {\n          on: { TOGGLE_BOLD: 'on' }\n        }\n      }\n    },\n    underline: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_UNDERLINE: 'off' }\n        },\n        off: {\n          on: { TOGGLE_UNDERLINE: 'on' }\n        }\n      }\n    },\n    italics: {\n      initial: 'off',\n      states: {\n        on: {\n          on: { TOGGLE_ITALICS: 'off' }\n        },\n        off: {\n          on: { TOGGLE_ITALICS: 'on' }\n        }\n      }\n    },\n    list: {\n      initial: 'none',\n      states: {\n        none: {\n          on: { BULLETS: 'bullets', NUMBERS: 'numbers' }\n        },\n        bullets: {\n          on: { NONE: 'none', NUMBERS: 'numbers' }\n        },\n        numbers: {\n          on: { BULLETS: 'bullets', NONE: 'none' }\n        }\n      }\n    }\n  }\n});\n\nconst boldState = wordMachine\n  .transition('bold.off', 'TOGGLE_BOLD')\n  .value;\n\n// {\n//   bold: 'on',\n//   italics: 'off',\n//   underline: 'off',\n//   list: 'none'\n// }\n\nconst nextState = wordMachine\n  .transition({\n    bold: 'off',\n    italics: 'off',\n    underline: 'on',\n    list: 'bullets'\n  }, 'TOGGLE_ITALICS')\n  .value;\n\n// {\n//   bold: 'off',\n//   italics: 'on',\n//   underline: 'on',\n//   list: 'bullets'\n// }\n```\n\n## History States\n\n<img src=\"https://imgur.com/I4QsQsz.png\" width=\"300\" alt=\"Machine with history state\" />\n\n```js\nconst paymentMachine = Machine({\n  initial: 'method',\n  states: {\n    method: {\n      initial: 'cash',\n      states: {\n        cash: { on: { SWITCH_CHECK: 'check' } },\n        check: { on: { SWITCH_CASH: 'cash' } },\n        hist: { history: true }\n      },\n      on: { NEXT: 'review' }\n    },\n    review: {\n      on: { PREVIOUS: 'method.hist' }\n    }\n  }\n});\n\nconst checkState = paymentMachine\n  .transition('method.cash', 'SWITCH_CHECK');\n\n// => State {\n//   value: { method: 'check' },\n//   history: State { ... }\n// }\n\nconst reviewState = paymentMachine\n  .transition(checkState, 'NEXT');\n\n// => State {\n//   value: 'review',\n//   history: State { ... }\n// }\n\nconst previousState = paymentMachine\n  .transition(reviewState, 'PREVIOUS')\n  .value;\n\n// => { method: 'check' }\n```\n\n## Interpreters\n- [`xstateful` by @avaragado](https://www.npmjs.com/package/@avaragado/xstateful)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidkpiano/xstate.git"
  },
  "scripts": {
    "build": "npm run build:cjs && npm run build:es && npm run build:umd && npm run build:utils",
    "build:cjs": "tsc",
    "build:es": "tsc --outDir es -m ES2015",
    "build:umd": "webpack -p ./es/index.js ./dist/xstate.js --config webpack.config.js",
    "build:utils": "webpack -p ./es/graph.js ./dist/xstate.utils.js --config webpack.utils.config.js",
    "postversion": "git push --follow-tags",
    "prepublish": "npm run build",
    "prettify": "prettier --config ./.prettierrc --write ./{lib,es,src,test}/**/*.ts",
    "publish:beta": "npm version patch && npm publish --tag beta",
    "start": "npm run build",
    "test": "npm run prettify && mocha --require ts-node/register test/**.ts test/**/*.test.ts",
    "version": "npm run build",
    "watch": "webpack ./lib/index.js ./dist/xstate.js --config webpack.config.js -w"
  },
  "types": "lib/index.d.ts",
  "version": "3.3.3"
}
