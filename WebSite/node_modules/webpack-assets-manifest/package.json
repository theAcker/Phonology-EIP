{
  "_args": [
    [
      {
        "raw": "webpack-assets-manifest@^3.0.2",
        "scope": null,
        "escapedName": "webpack-assets-manifest",
        "name": "webpack-assets-manifest",
        "rawSpec": "^3.0.2",
        "spec": ">=3.0.2 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-plugin-netlify"
    ]
  ],
  "_from": "webpack-assets-manifest@^3.0.2",
  "_hasShrinkwrap": false,
  "_id": "webpack-assets-manifest@3.1.1",
  "_location": "/webpack-assets-manifest",
  "_nodeVersion": "10.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-assets-manifest_3.1.1_1542314060962_0.1494694495873543"
  },
  "_npmUser": {
    "name": "webdeveric",
    "email": "eric@webdeveric.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "ajv": "6.10.0",
    "ajv-errors": "1.0.1",
    "ajv-keywords": "3.4.0"
  },
  "_requested": {
    "raw": "webpack-assets-manifest@^3.0.2",
    "scope": null,
    "escapedName": "webpack-assets-manifest",
    "name": "webpack-assets-manifest",
    "rawSpec": "^3.0.2",
    "spec": ">=3.0.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gatsby-plugin-netlify"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-assets-manifest/-/webpack-assets-manifest-3.1.1.tgz",
  "_shasum": "39bbc3bf2ee57fcd8ba07cda51c9ba4a3c6ae1de",
  "_shrinkwrap": null,
  "_spec": "webpack-assets-manifest@^3.0.2",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\gatsby-plugin-netlify",
  "author": {
    "name": "Eric King",
    "email": "eric@webdeveric.com",
    "url": "http://webdeveric.com/"
  },
  "bugs": {
    "url": "https://github.com/webdeveric/webpack-assets-manifest/issues"
  },
  "dependencies": {
    "chalk": "^2.0",
    "lodash.get": "^4.0",
    "lodash.has": "^4.0",
    "mkdirp": "^0.5",
    "schema-utils": "^1.0.0",
    "tapable": "^1.0.0",
    "webpack-sources": "^1.0.0"
  },
  "description": "This Webpack plugin will generate a JSON file that matches the original filename with the hashed version.",
  "devDependencies": {
    "chai": "^4.2.0",
    "chai-spies": "^1.0.0",
    "css-loader": "^1.0.1",
    "eslint": "^5.9.0",
    "eslint-config-webdeveric": "^0.3",
    "file-loader": "^2.0.0",
    "fs-extra": "^7.0.1",
    "istanbul": "^0.4",
    "jsdoc": "^3.0",
    "memory-fs": "^0.4.1",
    "mini-css-extract-plugin": "^0.4.4",
    "mocha": "^5.2.0",
    "rimraf": "^2.0",
    "superagent": "^3.8.3",
    "webpack": "^4.25.1",
    "webpack-dev-server": "^3.1.10"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-JV9V2QKc5wEWQptdIjvXDUL1ucbPLH2f27toAY3SNdGZp+xSaStAgpoMcvMZmqtFrBc9a5pTS1058vxyMPOzRQ==",
    "shasum": "39bbc3bf2ee57fcd8ba07cda51c9ba4a3c6ae1de",
    "tarball": "https://registry.npmjs.org/webpack-assets-manifest/-/webpack-assets-manifest-3.1.1.tgz",
    "fileCount": 6,
    "unpackedSize": 35074,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb7dhNCRA9TVsSAnZWagAAE64P/ij+1tus+fj0aBmH7Mwp\nqh+gyQaVYNeo9SP9juYXBe97tI2WYpGEZN11tIX9s2njyMS5KwrDQWKU8+0z\n4szVK1gGusDtkeDO+W/pb967QeEqsQeyu9iWyxYsTsfE0hlHvJ0TUKgEDjl0\nBIN/zzzqIQlzJJxU3zb9TzPdMVXdRwZCLEZTWxJV+fwLcpYqRMMXRLIAAf6W\nlbmKBwUlWfNSLv2GU+yqveBUO6XEHFWMYuCMCxuI+0+gALBinqqIZipHCj57\nP98Kj0pue9UjFj3Mcty8fvgDmSyyQEdJOSS4uLWAhtDZJ/C4CrQyC2h2F9ZS\nYPAOfG3U/+bOW9YnzfDnEgs4cgLWxed8UpMOUqFOePCKxGOKqy5LBbVpyMSk\nMZrpRHdA9a6te4CcrkFYv1FXxGiHPwmzQCujgHSkglQIw8yxNrfLTz4HOo6b\n/9AbwyHf4YTeWuGCxToxar+cydfLZ6OkegE22gQhshL78kefJ9pEKDFzRKIt\nDLZvgEBprOhfzw1VTm7kn0IJFs2/xNiKzNGu7eYi4+5u0rtu/MLQdgRJtCJn\nO6H4xlz2wflqTx4qGrRsCkowthMmxtHuRbGjl207XY32nTef/5Y8gjg9u8oq\nBx9Q06QYUnny1ccLSOl4TilRUIIFoA0llXnEmshsknNWlnOMPZM/t7tD1JhM\nHsI0\r\n=XyWo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.11.5"
  },
  "files": [
    "src"
  ],
  "gitHead": "3969c120a28b8d56838c608e54ec25560c2d08db",
  "homepage": "https://github.com/webdeveric/webpack-assets-manifest",
  "keywords": [
    "webpack-assets-manifest",
    "webpack-plugin",
    "webpack",
    "plugin",
    "assets",
    "manifest",
    "json",
    "subresource",
    "integrity",
    "sri"
  ],
  "license": "MIT",
  "main": "src/WebpackAssetsManifest.js",
  "maintainers": [
    {
      "name": "webdeveric",
      "email": "eric@webdeveric.com"
    }
  ],
  "name": "webpack-assets-manifest",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": ">=4.4.0"
  },
  "readme": "# Webpack Assets Manifest\n\n[![Build Status](https://travis-ci.org/webdeveric/webpack-assets-manifest.svg?branch=master)](https://travis-ci.org/webdeveric/webpack-assets-manifest)\n[![codecov](https://codecov.io/gh/webdeveric/webpack-assets-manifest/branch/master/graph/badge.svg)](https://codecov.io/gh/webdeveric/webpack-assets-manifest)\n[![dependencies Status](https://david-dm.org/webdeveric/webpack-assets-manifest/status.svg)](https://david-dm.org/webdeveric/webpack-assets-manifest)\n[![devDependencies Status](https://david-dm.org/webdeveric/webpack-assets-manifest/dev-status.svg)](https://david-dm.org/webdeveric/webpack-assets-manifest?type=dev)\n\nThis Webpack plugin will generate a JSON file that matches the original filename with the hashed version.\n\n## Installation\n\n:warning: Starting with version 2, this plugin works with Webpack 4+. Version 3.1 requires Webpack 4.4+.\n\n```shell\nnpm install webpack-assets-manifest --save-dev\n```\n\nIf you're using Webpack 3 or below, you'll need to install version 1.\n\n```shell\nnpm install webpack-assets-manifest@1 --save-dev\n```\n\n## New in version 3\n\n* Added [hooks](#hooks).\n* Added [examples](examples/).\n* Added options:\n  * [`integrity`](#integrity)\n  * [`integrityHashes`](#integrityhashes)\n  * [`entrypoints`](#entrypoints)\n  * [`entrypointsKey`](#entrypointskey)\n* Updated `customize` callback arguments. See [customized](examples/customized.js) example.\n* Removed `contextRelativeKeys` option.\n\n## Usage\n\nIn your webpack config, require the plugin then add an instance to the `plugins` array.\n\n```js\nconst path = require('path');\nconst WebpackAssetsManifest = require('webpack-assets-manifest');\n\nmodule.exports = {\n  entry: {\n    // Your entry points\n  },\n  output: {\n    path: path.join( __dirname, 'dist' ),\n    filename: '[name]-[hash].js',\n    chunkFilename: '[id]-[chunkhash].js',\n  },\n  module: {\n    // Your loader rules go here.\n  },\n  plugins: [\n    new WebpackAssetsManifest({\n      // Options go here\n    }),\n ],\n};\n```\n\n## Sample output\n\n```json\n{\n  \"main.js\": \"main-9c68d5e8de1b810a80e4.js\",\n  \"main.css\": \"main-9c68d5e8de1b810a80e4.css\",\n  \"images/logo.svg\": \"images/logo-b111da4f34cefce092b965ebc1078ee3.svg\"\n}\n```\n\n---\n\n## Options ([read the schema](src/options-schema.json))\n\n### `output`\n\nType: `string`\n\nDefault: `manifest.json`\n\nThis is where to save the manifest file relative to your webpack `output.path`.\n\n### `assets`\n\nType: `object`\n\nDefault: `{}`\n\nData is stored in this object.\n\n#### Sharing data\n\nYou can share data between instances by passing in your own object in the `assets` option.\n\nThis is useful in [multi-compiler mode](https://github.com/webpack/webpack/tree/master/examples/multi-compiler).\n\n```js\nconst data = Object.create(null);\n\nconst manifest1 = new WebpackAssetsManifest({\n  assets: data,\n});\n\nconst manifest2 = new WebpackAssetsManifest({\n  assets: data,\n});\n```\n\n### `space`\n\nType: `int`\n\nDefault: `2`\n\nNumber of spaces to use for pretty printing.\n\n### `replacer`\n\nType: `null`, `function`, or `array`\n\nDefault: `null`\n\n[Replacer reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter)\n\nYou'll probably want to use the `transform` hook instead.\n\n### `fileExtRegex`\n\nType: `regex`\n\nDefault: `/\\.\\w{2,4}\\.(?:map|gz)$|\\.\\w+$/i`\n\nThis is the regular expression used to find file extensions. You'll probably never need to change this.\n\n### `writeToDisk`\n\nType: `boolean`\n\nDefault: `false`\n\nWrite the manifest to disk using `fs` during `afterEmit`.\n\n:warning: If you're using another language for your site and you're using `webpack-dev-server` to process your assets during development,\nyou should set `writeToDisk: true` and provide an absolute path in `output` so the manifest file is actually written to disk and not kept only in memory.\n\n### `sortManifest`\n\nType: `boolean`, `function`\n\nDefault: `true`\n\nThe manifest is sorted alphabetically by default. You can turn off sorting by setting `sortManifest: false`.\n\nIf you want more control over how the manifest is sorted, you can provide your own\n[comparison function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\nSee the [sorted](examples/sorted.js) example.\n\n```js\nnew WebpackAssetsManifest({\n  sortManifest(a, b) {\n    // Return -1, 0, or 1\n  }\n});\n```\n\n### `merge`\n\nType: `boolean`, `string`\n\nDefault: `false`\n\nIf the `output` file already exists and you'd like to add to it, use `merge: true`.\nThe default behavior is to use the existing keys/values without modification.\n\n```js\nnew WebpackAssetsManifest({\n  output: '/path/to/manifest.json',\n  merge: true\n});\n```\n\nIf you need to customize during merge, use `merge: 'customize'`. \n\nIf you want to know if `customize` was called when merging with an existing manifest, you can check `manifest.isMerging`.\n\n```js\nnew WebpackAssetsManifest({\n  merge: 'customize',\n  customize(entry, original, manifest, asset) {\n    if ( manifest.isMerging ) {\n      // Do something\n    }\n  },\n}),\n```\n\n### `publicPath`\n\nType: `string`, `function`, `boolean`,\n\nDefault: `null`\n\nWhen using `publicPath: true`, your webpack config `output.publicPath` will be used as the value prefix.\n\n```js\nconst manifest = new WebpackAssetsManifest({\n  publicPath: true,\n});\n```\n\nWhen using a string, it will be the value prefix. One common use is to prefix your CDN URL.\n\n```js\nconst manifest = new WebpackAssetsManifest({\n  publicPath: '//cdn.example.com',\n});\n```\n\nIf you'd like to have more control, use a function. See the [custom CDN](examples/custom-cdn.js) example.\n\n```js\nconst manifest = new WebpackAssetsManifest({\n  publicPath(filename, manifest)\n  {\n    // customize filename here\n    return filename;\n  }\n});\n```\n\n### `entrypoints`\n\nType: `boolean`\n\nDefault: `false`\n\nInclude `compilation.entrypoints` in the manifest file.\n\n### `entrypointsKey`\n\nType: `string`, `boolean`\n\nDefault: `entrypoints`\n\nIf this is set to `false`, the `entrypoints` will be added to the root of the manifest.\n\n### `integrity`\n\nType: `boolean`\n\nDefault: `false`\n\nInclude the [subresource integrity hash](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity).\n\n### `integrityHashes`\n\nType: `array`\n\nDefault: `[ 'sha256', 'sha384', 'sha512' ]`\n\nHash algorithms to use when generating SRI. For browsers, the currently the allowed integrity hashes are `sha256`, `sha384`, and `sha512`.\n\nOther hash algorithms can be used if your target environment is not a browser.\nIf you were to create a tool to audit your S3 buckets for\n[data integrity](https://aws.amazon.com/premiumsupport/knowledge-center/data-integrity-s3/),\nyou could use something like this [example](examples/aws-s3-data-integrity.js) to record the `md5` hashes.\n\n### `integrityPropertyName`\n\nType: `string`\n\nDefault: `integrity`\n\nThis is the property that will be set on each entry in `compilation.assets`, which will then be available during `customize`.\nIt is customizable so that you can have multiple instances of this plugin and not have them overwrite the `currentAsset.integrity` property.\n\nYou'll probably only need to change this if you're using multiple instances of this plugin to create different manifests.\n\n### `apply`\n\nType: `function`\n\nDefault: `null`\n\nCallback to run after setup is complete.\n\n### `customize`\n\nType: `function`\n\nDefault: `null`\n\nCallback to customize each entry in the manifest.\n\n### `transform`\n\nType: `function`\n\nDefault: `null`\n\nCallback to transform the entire manifest.\n\n### `done`\n\nType: `function`\n\nDefault: `null`\n\nCallback to run after the compilation is done and the manifest has been written.\n\n---\n\n### Hooks\n\nThis plugin is using hooks from [Tapable](https://github.com/webpack/tapable/).\n\nThe `apply`, `customize`, `transform`, and `done` options are automatically tapped into the appropriate hook.\n\n| Name | Type | Callback signature |\n| ---- | ---- | --------- |\n| `apply` | `SyncHook` | `function(manifest){}` |\n| `customize` | `SyncWaterfallHook` | `function(entry, original, manifest, asset){}` |\n| `transform` | `SyncWaterfallHook` | `function(assets, manifest){}` |\n| `done` | `SyncHook` | `function(manifest, stats){}` |\n| `options` | `SyncWaterfallHook` | `function(options){}` |\n| `afterOptions` | `SyncHook` | `function(options){}` |\n\n#### Tapping into hooks\n\nTap into a hook by calling the `tap` method on the hook as shown below.\n\nIf you want more control over exactly what gets added to your manifest, then use the `customize` and `transform` hooks.\nSee the [customized](examples/customized.js) and [transformed](examples/transformed.js) examples.\n\n```js\nconst manifest = new WebpackAssetsManifest();\n\nmanifest.hooks.apply.tap('YourPluginName', function(manifest) {\n  // Do something here\n  manifest.set('some-key', 'some-value');\n});\n\nmanifest.hooks.customize.tap('YourPluginName', function(entry, original, manifest, asset) {\n  // customize entry here\n  return entry;\n});\n\nmanifest.hooks.transform.tap('YourPluginName', function(assets, manifest) {\n  // customize assets here\n  return assets;\n});\n\nmanifest.hooks.options.tap('YourPluginName', function(options) {\n  // customize options here\n  return options;\n});\n\nmanifest.hooks.done.tap('YourPluginName', function(manifest, stats) {\n  console.log(`The manifest has been written to ${manifest.getOutputPath()}`);\n  console.log(`${manifest}`);\n});\n```\n\nThese hooks can also be set by passing them in the constructor options.\n\n```js\nnew WebpackAssetsManifest({\n  done(manifest, stats) {\n    console.log(`The manifest has been written to ${manifest.getOutputPath()}`);\n    console.log(`${manifest}`);\n  }\n});\n```\n\nIf the manifest instance is passed to a hook, you can use `has(key)`, `get(key)`, `set(key, value)`, `setRaw(key, value)`,and `delete(key)` methods to manage what goes into the manifest.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webdeveric/webpack-assets-manifest.git"
  },
  "scripts": {
    "doc": "jsdoc -c ./jsdoc.json",
    "lint": "eslint --fix src test",
    "prepublishOnly": "npm run lint && npm test",
    "test": "mocha --colors",
    "test:coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec",
    "test:report": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec"
  },
  "version": "3.1.1"
}
