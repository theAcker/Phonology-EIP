{
  "_args": [
    [
      {
        "raw": "postcss-color-mod-function@^2.4.2",
        "scope": null,
        "escapedName": "postcss-color-mod-function",
        "name": "postcss-color-mod-function",
        "rawSpec": "^2.4.2",
        "spec": ">=2.4.2 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\postcss-preset-env"
    ]
  ],
  "_from": "postcss-color-mod-function@^2.4.2",
  "_hasShrinkwrap": false,
  "_id": "postcss-color-mod-function@2.4.3",
  "_location": "/postcss-color-mod-function",
  "_nodeVersion": "10.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/postcss-color-mod-function_2.4.3_1532173494821_0.014670850412566994"
  },
  "_npmUser": {
    "name": "jonathantneal",
    "email": "jonathantneal@hotmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {
    "chalk": "2.4.2",
    "supports-color": "5.5.0"
  },
  "_requested": {
    "raw": "postcss-color-mod-function@^2.4.2",
    "scope": null,
    "escapedName": "postcss-color-mod-function",
    "name": "postcss-color-mod-function",
    "rawSpec": "^2.4.2",
    "spec": ">=2.4.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-preset-env"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-color-mod-function/-/postcss-color-mod-function-2.4.3.tgz",
  "_shasum": "14a97f5b17a5f19396e9dea7ffcb5be732592baf",
  "_shrinkwrap": null,
  "_spec": "postcss-color-mod-function@^2.4.2",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher\\node_modules\\postcss-preset-env",
  "author": {
    "name": "Jonathan Neal",
    "email": "jonathantneal@hotmail.com"
  },
  "bugs": {
    "url": "https://github.com/jonathantneal/postcss-color-mod-function/issues"
  },
  "dependencies": {
    "@csstools/convert-colors": "^1.4.0",
    "postcss": "^6.0.23",
    "postcss-values-parser": "^1.5.0"
  },
  "description": "Modify colors using the color-mod() function in CSS",
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-eslint": "^8.2.6",
    "babel-preset-env": "^1.7.0",
    "echint": "^4.0.1",
    "eslint": "^5.2.0",
    "eslint-config-dev": "^2.0.0",
    "postcss-tape": "^2.2.0",
    "pre-commit": "^1.2.2",
    "rollup": "^0.63.4",
    "rollup-plugin-babel": "^3.0.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-TEATRHN1m2+vM4efwRoPyrAQTbBA4xgx1jSMPv64oLcwVFC4qr6d4o9DAD5LxygIMeBBBugQHvXoSIM+87NaFQ==",
    "shasum": "14a97f5b17a5f19396e9dea7ffcb5be732592baf",
    "tarball": "https://registry.npmjs.org/postcss-color-mod-function/-/postcss-color-mod-function-2.4.3.tgz",
    "fileCount": 10,
    "unpackedSize": 161813,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbUxy2CRA9TVsSAnZWagAAikkP/1eyWkRCOS8zI/7lJVKj\nJsLcS6XJkP6ryJErES5DCQHwd99K9wm5U/ph/fM8qK77/C1mtVmMjBLE8lPJ\nlI+E9DVV/6+wrFohAiKtU063xV/ToUx2DAFFLzEoFcPhrSa8q5CWLyCPAxji\nS6p+6NuKzbmt2JEn/zq5/ucpjEApxOrNDLek/VLbrOFO1bw14+itKDN5pyp8\n5rSadg7aJPUkZGeEvm4qNCWjpCa/z3dA/DrGnqMFDpiArhdFtcrpHqtv6/IT\net3ecEpxxoJlICTShoPVmxmAY/R5+6ZIySpEzKXQLqNxBYoK1inZRU/n09BI\nrG5J8WUGnlY3J5nwu9tnN2QEfiFWxrPfbojJASXeQL/EOm8VzCO8gRvbvJmw\nFd0Xxd6DmU+cAETS7jDhGd95+ejj7a2JLFrVHchId7AaoXzGs10lkEIEDsyz\nYWkguSDbjtYbH2wx/JqK6b8QLYYEnWl8gp3yaPKDRcrb8iR3nB93AfetZb7c\nHlJgAKF/tBIITxUm3iCNn5me9ugP+62WixB22PD9FqX7BDHTR2A/KqgtKPn8\n4mFzYjYuSWxiSYZyiXA/9buTxDI9fxe0t5Kqx0uQ0l7nQDoJzs32EVyuCSlS\n8TO/Bs6AHLPuvlqfzLHbO8gbKa27G9DiOiUsFe8DE4xiWyb/bKejIQmRUstP\nmHOr\r\n=b65+\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "eslintConfig": {
    "extends": "dev",
    "parser": "babel-eslint",
    "rules": {
      "max-params": [
        2,
        5
      ]
    }
  },
  "files": [
    "index.cjs.js",
    "index.es.js",
    "lib"
  ],
  "gitHead": "6ce644fa93fe7a3c8938ff2c1d54906e0e608f8e",
  "homepage": "https://github.com/jonathantneal/postcss-color-mod-function#readme",
  "keywords": [
    "postcss",
    "css",
    "postcss-plugin",
    "colors",
    "colours",
    "modifications",
    "mods",
    "adjusters",
    "adjustments",
    "csswg",
    "rgba",
    "hsla",
    "white",
    "black",
    "red",
    "green",
    "blue",
    "alpha",
    "hue",
    "saturation",
    "lightness",
    "whiteness",
    "blackness",
    "tint",
    "shade",
    "blenda",
    "contrast"
  ],
  "license": "CC0-1.0",
  "main": "index.cjs.js",
  "maintainers": [
    {
      "name": "jonathantneal",
      "email": "jonathantneal@hotmail.com"
    }
  ],
  "module": "index.es.js",
  "name": "postcss-color-mod-function",
  "optionalDependencies": {},
  "readme": "# PostCSS color-mod() Function [<img src=\"https://postcss.github.io/postcss/logo.svg\" alt=\"PostCSS Logo\" width=\"90\" height=\"90\" align=\"right\">][postcss]\n\n[![NPM Version][npm-img]][npm-url]\n[![CSS Standard Status][css-img]][css-url]\n[![Build Status][cli-img]][cli-url]\n[![Windows Build Status][win-img]][win-url]\n[![Support Chat][git-img]][git-url]\n\n[PostCSS color-mod() Function] lets you modify colors using the `color-mod()`\nfunction in CSS, following the [CSS Color Module Level 4] specification.\n\n```css\n:root {\n  --brand-red:      color-mod(yellow blend(red 50%));\n  --brand-red-hsl:  color-mod(yellow blend(red 50% hsl));\n  --brand-red-hwb:  color-mod(yellow blend(red 50% hwb));\n  --brand-red-dark: color-mod(red blackness(20%));\n}\n\n/* becomes */\n\n:root {\n  --brand-red:      rgb(255, 127.5, 0);\n  --brand-red-hsl:  rgb(255, 127.5, 255);\n  --brand-red-hwb:  rgb(255, 127.5, 0);\n  --brand-red-dark: rgb(204, 0, 0);\n}\n\n/* or, using stringifier(color) { return color.toString() } */\n\n:root {\n  --brand-red:      rgb(100% 50% 0% / 100%);\n  --brand-red-hsl:  hsl(30 100% 50% / 100%);\n  --brand-red-hwb:  hwb(30 0% 0% / 100%);\n  --brand-red-dark: hwb(0 0% 20% / 100%);\n}\n```\n\n## Supported Colors\n\nThe `color-mod()` function accepts `rgb()`, legacy comma-separated `rgb()`,\n`rgba()`, `hsl()`, legacy comma-separated `hsl()`, `hsla()`, `hwb()`, and\n`color-mod()` colors, as well as 3, 4, 6, and 8 digit hex colors, and named\ncolors without the need for additional plugins.\n\nImplemention details are available in\n[the specification](https://drafts.csswg.org/css-color/#funcdef-color-mod).\n\n## Supported Color Adjusters\n\nThe `color-mod()` function accepts `red()`, `green()`, `blue()`, `a()` /\n`alpha()`, `rgb()`, `h()` / `hue()`, `s()` / `saturation()`, `l()` /\n`lightness()`, `w()` / `whiteness()`, `b()` / `blackness()`, `tint()`,\n`shade()`, `blend()`, `blenda()`, and `contrast()` color adjusters.\n\nImplemention details are available in\n[the specification](https://drafts.csswg.org/css-color/#typedef-color-adjuster).\n\n## Supported Variables\n\nBy default, `var()` variables will be used if their corresponding Custom\nProperties are found in a `:root` rule, or if a fallback value is specified.\n\n---\n\n## Usage\n\nAdd [PostCSS color-mod() Function] to your build tool:\n\n```bash\nnpm install postcss-color-mod-function --save-dev\n```\n\n#### Node\n\nUse [PostCSS color-mod() Function] to process your CSS:\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcssColorMod.process(YOUR_CSS);\n```\n\n#### PostCSS\n\nAdd [PostCSS] to your build tool:\n\n```bash\nnpm install postcss --save-dev\n```\n\nUse [PostCSS color-mod() Function] as a plugin:\n\n```js\nimport postcss from 'postcss';\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcss([\n  postcssColorMod(/* options */)\n]).process(YOUR_CSS);\n```\n\n#### Gulp\n\nAdd [Gulp PostCSS] to your build tool:\n\n```bash\nnpm install gulp-postcss --save-dev\n```\n\nUse [PostCSS color-mod() Function] in your Gulpfile:\n\n```js\nimport postcss from 'gulp-postcss';\nimport postcssColorMod from 'postcss-color-mod-function';\n\ngulp.task('css',\n  () => gulp.src('./src/*.css')\n  .pipe( postcss([ postcssColorMod(/* options */) ]) )\n  .pipe( gulp.dest('.') );\n```\n\n#### Grunt\n\nAdd [Grunt PostCSS] to your build tool:\n\n```bash\nnpm install grunt-postcss --save-dev\n```\n\nUse [PostCSS color-mod() Function] in your Gruntfile:\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\ngrunt.loadNpmTasks('grunt-postcss');\n\ngrunt.initConfig({\n  postcss: {\n    options: {\n      use: [ postcssColorMod(/* options */) ]\n    },\n    dist: {\n      src: '*.css'\n    }\n  }\n});\n```\n\n---\n\n## Options\n\n### stringifier\n\nThe `stringifier` option defines how transformed colors will be produced in CSS.\nBy default, legacy `rbg()` and `rgba()` colors are produced, but this can be\neasily updated to support [CSS Color Module Level 4 colors] colors.\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcssColorMod({\n  stringifier(color) {\n    return color.toString(); // use CSS Color Module Level 4 colors (rgb, hsl, hwb)\n  }\n});\n```\n\nFuture major releases of [PostCSS color-mod() Function] may reverse this\nfunctionality so that CSS Color Module Level 4 colors are produced by default.\n\n### unresolved\n\nThe `unresolved` option defines how unresolved functions and arguments should\nbe handled. The available options are `throw`, `warn`, and `ignore`. The\ndefault option is to `throw`.\n\nIf `ignore` is used, the `color-mod()` function will remain unchanged.\n\n```js\nimport postcssColorMod from 'postcss-color-mod-function';\n\npostcssColorMod({\n  unresolved: 'ignore' // ignore unresolved color-mod() functions\n});\n```\n\n### transformVars\n\nThe `transformVars` option defines whether `var()` variables used within\n`color-mod()` should be transformed into their corresponding Custom Properties\navailable in `:root`, or their fallback value if it is specified. By default,\n`var()` variables will be transformed.\n\nHowever, because these transformations occur at build time, they cannot be\nconsidered accurate. Accurately resolving cascading variables relies on\nknowledge of the living DOM tree.\n\n[cli-img]: https://img.shields.io/travis/jonathantneal/postcss-color-mod-function.svg\n[cli-url]: https://travis-ci.org/jonathantneal/postcss-color-mod-function\n[css-img]: https://cssdb.org/badge/color-mod-function.svg\n[css-url]: https://preset-env.cssdb.org/features#color-mod-function\n[git-img]: https://img.shields.io/badge/support-chat-blue.svg\n[git-url]: https://gitter.im/postcss/postcss\n[npm-img]: https://img.shields.io/npm/v/postcss-color-mod-function.svg\n[npm-url]: https://www.npmjs.com/package/postcss-color-mod-function\n[win-img]: https://img.shields.io/appveyor/ci/jonathantneal/postcss-color-mod-function.svg\n[win-url]: https://ci.appveyor.com/project/jonathantneal/postcss-color-mod-function\n\n[CSS Color Module Level 4]: https://www.w3.org/TR/css-color-4/#funcdef-color-mod\n[Gulp PostCSS]: https://github.com/postcss/gulp-postcss\n[Grunt PostCSS]: https://github.com/nDmitry/grunt-postcss\n[PostCSS]: https://github.com/postcss/postcss\n[PostCSS color-mod() Function]: https://github.com/jonathantneal/postcss-color-mod-function\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonathantneal/postcss-color-mod-function.git"
  },
  "scripts": {
    "prepublishOnly": "npm test",
    "pretest": "rollup -c .rollup.js --silent",
    "test": "echo 'Running tests...'; npm run test:ec && npm run test:js && npm run test:tape",
    "test:ec": "echint --ignore index.bundle.js test",
    "test:js": "eslint *.js lib/*.js --cache --ignore-path .gitignore --quiet",
    "test:tape": "postcss-tape"
  },
  "version": "2.4.3"
}
