{
  "_args": [
    [
      {
        "raw": "babel-plugin-import@^1.8.0",
        "scope": null,
        "escapedName": "babel-plugin-import",
        "name": "babel-plugin-import",
        "rawSpec": "^1.8.0",
        "spec": ">=1.8.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Alexandre\\VoiceWatcher"
    ]
  ],
  "_from": "babel-plugin-import@^1.8.0",
  "_hasShrinkwrap": false,
  "_id": "babel-plugin-import@1.11.0",
  "_location": "/babel-plugin-import",
  "_nodeVersion": "10.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/babel-plugin-import_1.11.0_1540797704867_0.6128560383883184"
  },
  "_npmUser": {
    "name": "sorrycc",
    "email": "sorrycc@gmail.com"
  },
  "_npmVersion": "6.4.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-import@^1.8.0",
    "scope": null,
    "escapedName": "babel-plugin-import",
    "name": "babel-plugin-import",
    "rawSpec": "^1.8.0",
    "spec": ">=1.8.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-import/-/babel-plugin-import-1.11.0.tgz",
  "_shasum": "78ac908e6b225206babb734e19eae5f78d6d1035",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-import@^1.8.0",
  "_where": "C:\\Users\\Alexandre\\VoiceWatcher",
  "author": {
    "name": "chencheng",
    "email": "sorrycc@gmail.com"
  },
  "babel": {
    "presets": [
      "umi"
    ]
  },
  "bugs": {
    "url": "https://github.com/ant-design/babel-plugin-import/issues"
  },
  "dependencies": {
    "@babel/helper-module-imports": "^7.0.0",
    "@babel/runtime": "^7.0.0"
  },
  "description": "Component modular import plugin for babel.",
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "babel-core": "^7.0.0-0",
    "babel-preset-umi": "^1.0.0",
    "coveralls": "^2.11.6",
    "eslint": "^2.7.0",
    "eslint-config-airbnb": "^6.2.0",
    "material-ui": "^0.15.4",
    "pre-commit": "~1.1.2",
    "react-toolbox": "^1.2.5",
    "umi-tools": "^0.1.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-de9dWdU1YjmWRPYurlHRKD2hTd24z0bIQ0/JgyXqLMXML+TsvEkVhtqzOsNtu9MmCuvwBiTTTjZBbZXA1Xu7TQ==",
    "shasum": "78ac908e6b225206babb734e19eae5f78d6d1035",
    "tarball": "https://registry.npmjs.org/babel-plugin-import/-/babel-plugin-import-1.11.0.tgz",
    "fileCount": 4,
    "unpackedSize": 18494,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb1rUJCRA9TVsSAnZWagAAPqYQAJSjuxwHXJv6U2jhvn3L\nbouKXv87B5s0y3cZVYHSl7w/iptsmD3DtN/6+6AMfEVq2aXM9b/xyLkO/9qt\nVVlunLueGrroaHCWE3SURSb/eeAiuI3pmrwEBgc+l+KE5pikLWJ4+KxpK0Z4\nftCkUhJW49ku6aX/Kn0spKnWzIIx0jkN78ON4jYV3bMdSUN8RUWV86OsfbnT\nzt07GSx+3PVxnFG/tcEf/B5lWQ6QslqmW7EgDR07UtqdlCd/f6Ikqs+jr3Z7\nDl7TZEmEdZAu+mQhsGfhQ5vZWlzmrNJDJAxoKnjnTS8rjS6cJTXbsYOto45+\nfTDwElRmkznJCQu+0XkVD4ChSuibtynmmJgnQb5lCni5dZwef8Zx0URZ4OXC\nzE2K7RmsJ8K/rWA1XFqtQCqklBxQBHwm1YRSaRVbFYK6vihLZjT0L8w/VxtR\n8T+ypG/R/ZhE+xBy3Zy8kynYLchWnu3YPIXwEw6f3odiFx7jrWqjXetTvrm2\nmVYe+PVb8tA0fWby6l0yWtYMeaUTAyEYhba8oZVzAh9fqK7ItoNe8Dp/B2Qm\n8rmYSYI1uED3297IwtYTEID+5MaQyxvILGdW1Ru/wuCuSqwL/AofNbzHnxnB\nNLUyjc1mqUf/yYWCd9o2olTAWCHmPiPwjnwnaC+9IiNpM3QvC4lC8S89ON5Y\nUGy2\r\n=NGBI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib",
    "package.json",
    "README.md"
  ],
  "gitHead": "75fdcb5555bde55a2ee1104ca526487983f2a80b",
  "homepage": "https://github.com/ant-design/babel-plugin-import#readme",
  "keywords": [
    "babel-plugin",
    "antd"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "afc163",
      "email": "afc163@gmail.com"
    },
    {
      "name": "paranoidjk",
      "email": "hust2012jiangkai@gmail.com"
    },
    {
      "name": "sorrycc",
      "email": "sorrycc@gmail.com"
    },
    {
      "name": "yesmeck",
      "email": "yesmeck@gmail.com"
    }
  ],
  "name": "babel-plugin-import",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "readme": "# babel-plugin-import\n\nModular import plugin for babel, compatible with [antd](https://github.com/ant-design/ant-design), [antd-mobile](https://github.com/ant-design/ant-design-mobile), lodash, [material-ui](http://material-ui.com/), and so on.\n\n[![NPM version](https://img.shields.io/npm/v/babel-plugin-import.svg?style=flat)](https://npmjs.org/package/babel-plugin-import)\n[![Build Status](https://img.shields.io/travis/ant-design/babel-plugin-import.svg?style=flat)](https://travis-ci.org/ant-design/babel-plugin-import)\n\n----\n\n## Why babel-plugin-import\n\n- [English Instruction](https://ant.design/docs/react/getting-started#Import-on-Demand)\n- [中文说明](https://ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD)\n\n## Where to add babel-plugin-import\n\n- [babelrc](https://babeljs.io/docs/usage/babelrc/)\n- [babel-loader](https://github.com/babel/babel-loader)\n\n## Example\n\n#### `{ \"libraryName\": \"antd\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: \"css\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style/css');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: true }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\nNote : with `style: true` css source files are imported and optimizations can be done during compilation time. With `style: \"css\"`, pre bundled css files are imported as they are.  \n\n`style: true` can reduce the bundle size significantly, depending on your usage of the library.\n\n## Usage\n\n```bash\nnpm install babel-plugin-import --save-dev\n```\n\nVia `.babelrc` or babel-loader.\n\n```js\n{\n  \"plugins\": [[\"import\", options]]\n}\n```\n\n### options\n\n`options` can be object.\n\n```javascript\n{\n  \"libraryName\": \"antd\",\n  \"style\": true,   // or 'css'\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"lodash\",\n  \"libraryDirectory\": \"\",\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"@material-ui/core\",\n  \"libraryDirectory\": \"components\",  // default: lib\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n~`options` can be an array.~ It's not available in babel@7+\n\nFor Example: \n\n```javascript\n[\n  {\n    \"libraryName\": \"antd\",\n    \"libraryDirectory\": \"lib\",   // default: lib\n    \"style\": true\n  },\n  {\n    \"libraryName\": \"antd-mobile\"\n  },\n]\n```\n`Options` can't be an array in babel@7+, but you can add plugins with name to support multiple dependencies.\n\nFor Example:\n\n```javascrit\n// .babelrc\n\"plugins\": [\n  [\"import\", { \"libraryName\": \"antd\", \"libraryDirectory\": \"lib\"}, \"ant\"],\n  [\"import\", { \"libraryName\": \"ant-mobile\", \"libraryDirectory\": \"lib\"}, \"ant-mobile\"]\n]\n```\n\n#### style\n\n- `[\"import\", { \"libraryName\": \"antd\" }]`: import js modularly\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": true }]`: import js and css modularly (LESS/Sass source files)\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": \"css\" }]`: import js and css modularly (css built files)\n\nIf option style is a `Function`, `babel-plugin-import` will auto import the file which filepath equal to the function return value. This is useful for the components library developers.\n\ne.g. \n- ``[\"import\", { \"libraryName\": \"antd\", \"style\": (name) => `${name}/style/2x` }]``: import js and css modularly & css file path is `ComponentName/style/2x`\n\nIf a component has no style, you can use the `style` function to return a `false` and the style will be ignored.\n\ne.g. \n```js\n[\n  \"import\", \n    { \n      \"libraryName\": \"antd\", \n      \"style\": (name: string, file: Object) => {\n        if(name === 'antd/lib/utils'){\n          return false;\n        }\n        return `${name}/style/2x`;\n      }\n    }\n]\n```\n\n#### customName\n\nWe can use `customName` to customize import file path.\n\nFor example, the default behavior:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/time-picker');\n```\n\nYou can set `camel2DashComponentName` to `false` to disable transfer from camel to dash:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/TimePicker');\n```\n\nAnd finally, you can use `customName` to customize each name parsing:\n\n```js\n[\n  \"import\", \n    { \n      \"libraryName\": \"antd\", \n      \"customName\": (name: string) => {\n        if (name === 'TimePicker'){\n          return 'antd/lib/custom-time-picker';\n        }\n        return `antd/lib/${name}`;\n      }\n    }\n]\n```\n\nSo this result is:\n\n```typescript\nimport { TimePicker } from \"antd\"\n↓ ↓ ↓ ↓ ↓ ↓\nvar _button = require('antd/lib/custom-time-picker');\n```\n\n#### transformToDefaultImport\n\nSet this option to `false` if your module does not have a `default` export.\n\n### Note\n\nbabel-plugin-import will not work properly if you add the library to the webpack config [vendor](https://webpack.github.io/docs/code-splitting.html#split-app-and-vendor-code). \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ant-design/babel-plugin-import.git"
  },
  "scripts": {
    "build": "umi-tools build",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "debug": "umi-tools test",
    "lint": "eslint --ext .js src",
    "publish": "npm run build && npm publish",
    "test": "umi-tools test --coverage"
  },
  "version": "1.11.0"
}
